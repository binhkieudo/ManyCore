// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLROM(
  input         auto_in_a_valid,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [16:0] auto_in_a_bits_address,
  input         auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [31:0] auto_in_d_bits_data
);

  wire [1023:0][31:0] _GEN =
    '{32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h73656D61,
      32'h6E2D7475,
      32'h7074756F,
      32'h2D6B636F,
      32'h6C630073,
      32'h6C6C6563,
      32'h2D6B636F,
      32'h6C632300,
      32'h7365676E,
      32'h61722D65,
      32'h6761746C,
      32'h6F760079,
      32'h636E6575,
      32'h71657266,
      32'h2D78616D,
      32'h2D697073,
      32'h70772D,
      32'h656C6261,
      32'h73696400,
      32'h73747075,
      32'h72726574,
      32'h6E690074,
      32'h6E657261,
      32'h702D7470,
      32'h75727265,
      32'h746E6900,
      32'h736B636F,
      32'h6C630076,
      32'h65646E2C,
      32'h76637369,
      32'h72007974,
      32'h69726F69,
      32'h72702D78,
      32'h616D2C76,
      32'h63736972,
      32'h686361,
      32'h7474612D,
      32'h67756265,
      32'h64006465,
      32'h646E6574,
      32'h78652D73,
      32'h74707572,
      32'h7265746E,
      32'h69007365,
      32'h6D616E2D,
      32'h67657200,
      32'h7365676E,
      32'h61720065,
      32'h6C646E61,
      32'h68700072,
      32'h656C6C6F,
      32'h72746E6F,
      32'h632D7470,
      32'h75727265,
      32'h746E6900,
      32'h736C6C65,
      32'h632D7470,
      32'h75727265,
      32'h746E6923,
      32'h737574,
      32'h61747300,
      32'h6D697464,
      32'h2C657669,
      32'h66697300,
      32'h736E6F69,
      32'h67657270,
      32'h6D702C76,
      32'h63736972,
      32'h797469,
      32'h72616C75,
      32'h6E617267,
      32'h706D702C,
      32'h76637369,
      32'h72006173,
      32'h692C7663,
      32'h73697200,
      32'h67657200,
      32'h65686361,
      32'h632D6C65,
      32'h76656C2D,
      32'h7478656E,
      32'h657A69,
      32'h732D6568,
      32'h6361632D,
      32'h69007374,
      32'h65732D65,
      32'h68636163,
      32'h2D690065,
      32'h7A69732D,
      32'h6B636F6C,
      32'h622D6568,
      32'h6361632D,
      32'h6900746E,
      32'h756F632D,
      32'h746E696F,
      32'h706B6165,
      32'h72622D63,
      32'h6578652D,
      32'h65726177,
      32'h64726168,
      32'h657079,
      32'h745F6563,
      32'h69766564,
      32'h79636E,
      32'h65757165,
      32'h72662D6B,
      32'h636F6C63,
      32'h79636E,
      32'h65757165,
      32'h72662D65,
      32'h73616265,
      32'h6D697400,
      32'h68746170,
      32'h2D74756F,
      32'h64747300,
      32'h306C6169,
      32'h72657300,
      32'h6C65646F,
      32'h6D00656C,
      32'h62697461,
      32'h706D6F63,
      32'h736C6C,
      32'h65632D65,
      32'h7A697323,
      32'h736C6C,
      32'h65632D73,
      32'h73657264,
      32'h64612309,
      32'h2,
      32'h2,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'h1100CC,
      32'h8,
      32'h3,
      32'h0,
      32'h30,
      32'h30303031,
      32'h31407265,
      32'h74746573,
      32'h2D746573,
      32'h65722D65,
      32'h6C697401,
      32'h2,
      32'h0,
      32'h6B636F6C,
      32'h632D6465,
      32'h7869661B,
      32'hC,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h735F6D65,
      32'h74737973,
      32'h627573ED,
      32'h1000015,
      32'h3,
      32'h80,
      32'hF0FA0253,
      32'h4,
      32'h3,
      32'h0,
      32'hE0,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h735F6D65,
      32'h74737973,
      32'h62757301,
      32'h2,
      32'h4,
      32'h39,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6B636F6C,
      32'h632D6465,
      32'h7869661B,
      32'hC,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h705F6D65,
      32'h74737973,
      32'h627573ED,
      32'h1000015,
      32'h3,
      32'h80,
      32'hF0FA0253,
      32'h4,
      32'h3,
      32'h0,
      32'hE0,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h705F6D65,
      32'h74737973,
      32'h62757301,
      32'h2,
      32'h0,
      32'h6B636F6C,
      32'h632D6465,
      32'h7869661B,
      32'hC,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h6D5F6D65,
      32'h74737973,
      32'h627573ED,
      32'h1000015,
      32'h3,
      32'h80,
      32'hF0FA0253,
      32'h4,
      32'h3,
      32'h0,
      32'hE0,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6B,
      32'h636F6C63,
      32'h5F737562,
      32'h6D5F6D65,
      32'h74737973,
      32'h62757301,
      32'h2,
      32'h0,
      32'h6B636F6C,
      32'h632D6465,
      32'h7869661B,
      32'hC,
      32'h3,
      32'h0,
      32'h6B636F,
      32'h6C635F32,
      32'h6C5F6D65,
      32'h74737973,
      32'h627573ED,
      32'h1000013,
      32'h3,
      32'h80,
      32'hF0FA0253,
      32'h4,
      32'h3,
      32'h0,
      32'hE0,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6B636F,
      32'h6C635F32,
      32'h6C5F6D65,
      32'h74737973,
      32'h62757301,
      32'h2,
      32'h2,
      32'hE4,
      32'hC0000E4,
      32'hC0000D1,
      32'h1000008,
      32'h3,
      32'h40,
      32'h420F00BF,
      32'h1000004,
      32'h3,
      32'h0,
      32'hCC,
      32'h4,
      32'h3,
      32'hB4,
      32'h1000000,
      32'h3,
      32'h0,
      32'h74,
      32'h6F6C732D,
      32'h6970732D,
      32'h636D6D1B,
      32'hD,
      32'h3,
      32'h0,
      32'h3040,
      32'h636D6D01,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'h100064CC,
      32'h8,
      32'h3,
      32'h2,
      32'hA9,
      32'h1000004,
      32'h3,
      32'h5,
      32'h98,
      32'h1000004,
      32'h3,
      32'h0,
      32'h30697073,
      32'h2C657669,
      32'h6669731B,
      32'hC,
      32'h3,
      32'h4,
      32'h91,
      32'h1000004,
      32'h3,
      32'h0,
      32'hF,
      32'h4,
      32'h3,
      32'h1,
      32'h0,
      32'h4,
      32'h3,
      32'h0,
      32'h30,
      32'h30303130,
      32'h30343640,
      32'h69707301,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'h64CC,
      32'h8,
      32'h3,
      32'h1,
      32'hA9,
      32'h1000004,
      32'h3,
      32'h5,
      32'h98,
      32'h1000004,
      32'h3,
      32'h0,
      32'h30,
      32'h74726175,
      32'h2C657669,
      32'h6669731B,
      32'hD,
      32'h3,
      32'h4,
      32'h91,
      32'h1000004,
      32'h3,
      32'h0,
      32'h30303030,
      32'h30303436,
      32'h406C6169,
      32'h72657301,
      32'h2,
      32'h0,
      32'h6D656D48,
      32'h1000004,
      32'h3,
      32'h0,
      32'h10000,
      32'h100CC,
      32'h8,
      32'h3,
      32'h0,
      32'h306D6F72,
      32'h2C657669,
      32'h6669731B,
      32'hC,
      32'h3,
      32'h0,
      32'h3030,
      32'h30303140,
      32'h6D6F7201,
      32'h2,
      32'h5,
      32'h39,
      32'h1000004,
      32'h3,
      32'h2,
      32'h86,
      32'h1000004,
      32'h3,
      32'h3,
      32'h73,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h400,
      32'hCCC,
      32'h8,
      32'h3,
      32'hB,
      32'h3,
      32'h52,
      32'h1000008,
      32'h3,
      32'h24,
      32'h1000000,
      32'h3,
      32'h0,
      32'h3063696C,
      32'h702C7663,
      32'h7369721B,
      32'hC,
      32'h3,
      32'h1,
      32'h13,
      32'h1000004,
      32'h3,
      32'h0,
      32'h30,
      32'h30303030,
      32'h30634072,
      32'h656C6C6F,
      32'h72746E6F,
      32'h632D7470,
      32'h75727265,
      32'h746E6901,
      32'h2,
      32'h0,
      32'h10000000,
      32'h300000CC,
      32'h8,
      32'h3,
      32'h0,
      32'h3072,
      32'h6F727265,
      32'h2C657669,
      32'h6669731B,
      32'hE,
      32'h3,
      32'h0,
      32'h3030,
      32'h30334065,
      32'h63697665,
      32'h642D726F,
      32'h72726501,
      32'h2,
      32'h2,
      32'h39,
      32'h1000004,
      32'h3,
      32'h0,
      32'h6D656D48,
      32'h1000004,
      32'h3,
      32'h0,
      32'h40000000,
      32'h90CC,
      32'h8,
      32'h3,
      32'h0,
      32'h30,
      32'h6D697464,
      32'h2C657669,
      32'h6669731B,
      32'hD,
      32'h3,
      32'h0,
      32'h3030,
      32'h30303030,
      32'h3039406D,
      32'h69746401,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'hCC,
      32'h8,
      32'h3,
      32'hFF,
      32'hFF000003,
      32'h52,
      32'h1000008,
      32'h3,
      32'h0,
      32'h67,
      32'h61746A66,
      32'h1000005,
      32'h3,
      32'h0,
      32'h33,
      32'h31302D67,
      32'h75626564,
      32'h2C766373,
      32'h69720033,
      32'h31302D67,
      32'h75626564,
      32'h2C657669,
      32'h6669731B,
      32'h21,
      32'h3,
      32'h0,
      32'h304072,
      32'h656C6C6F,
      32'h72746E6F,
      32'h632D6775,
      32'h62656401,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'h1000CC,
      32'h8,
      32'h3,
      32'h0,
      32'h303030,
      32'h30303140,
      32'h72657461,
      32'h672D6B63,
      32'h6F6C6301,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000,
      32'h2CC,
      32'h8,
      32'h3,
      32'h7,
      32'h3,
      32'h3,
      32'h3,
      32'h52,
      32'h1000010,
      32'h3,
      32'h0,
      32'h30,
      32'h746E696C,
      32'h632C7663,
      32'h7369721B,
      32'hD,
      32'h3,
      32'h0,
      32'h3030,
      32'h30303030,
      32'h3240746E,
      32'h696C6301,
      32'h2,
      32'h0,
      32'h6C6F7274,
      32'h6E6F6348,
      32'h1000008,
      32'h3,
      32'h0,
      32'h10000000,
      32'h400000CC,
      32'h8,
      32'h3,
      32'h0,
      32'h3030,
      32'h30344067,
      32'h65722D73,
      32'h73657264,
      32'h64612D74,
      32'h6F6F6201,
      32'h41,
      32'h1000000,
      32'h3,
      32'h0,
      32'h7375622D,
      32'h656C706D,
      32'h69730063,
      32'h6F732D64,
      32'h72617970,
      32'h6968632C,
      32'h7261622D,
      32'h6263751B,
      32'h20,
      32'h3,
      32'h1,
      32'hF,
      32'h4,
      32'h3,
      32'h1,
      32'h0,
      32'h4,
      32'h3,
      32'h0,
      32'h636F7301,
      32'h2,
      32'h1,
      32'h39,
      32'h1000004,
      32'h3,
      32'h0,
      32'h1000,
      32'h80CC,
      32'h8,
      32'h3,
      32'h0,
      32'h79726F,
      32'h6D656D63,
      32'h7,
      32'h3,
      32'h0,
      32'h30303030,
      32'h30303038,
      32'h4079726F,
      32'h6D656D01,
      32'h2,
      32'h0,
      32'h3066,
      32'h6974682C,
      32'h6263751B,
      32'hA,
      32'h3,
      32'h0,
      32'h66,
      32'h69746801,
      32'h2,
      32'h2,
      32'h2,
      32'h3,
      32'h39,
      32'h1000004,
      32'h3,
      32'h24,
      32'h1000000,
      32'h3,
      32'h0,
      32'h63746E,
      32'h692D7570,
      32'h632C7663,
      32'h7369721B,
      32'hF,
      32'h3,
      32'h1,
      32'h13,
      32'h1000004,
      32'h3,
      32'h0,
      32'h72,
      32'h656C6C6F,
      32'h72746E6F,
      32'h632D7470,
      32'h75727265,
      32'h746E6901,
      32'h40,
      32'h420F0040,
      32'h4,
      32'h3,
      32'h0,
      32'h79,
      32'h616B6F0C,
      32'h1000005,
      32'h3,
      32'h2,
      32'h0,
      32'h1000004,
      32'h3,
      32'h8,
      32'hEF,
      32'h4,
      32'h3,
      32'h4,
      32'hDA,
      32'h4,
      32'h3,
      32'h0,
      32'h74,
      32'h656B636F,
      32'h72785F6D,
      32'h7068697A,
      32'h5F696563,
      32'h6E656669,
      32'h7A5F7273,
      32'h63697A63,
      32'h616D6932,
      32'h337672D0,
      32'h25,
      32'h3,
      32'h0,
      32'hCC,
      32'h4,
      32'h3,
      32'h1,
      32'hBB,
      32'h4,
      32'h3,
      32'h0,
      32'h100000AE,
      32'h4,
      32'h3,
      32'h40,
      32'hA1,
      32'h4,
      32'h3,
      32'h40,
      32'h8E,
      32'h4,
      32'h3,
      32'h1,
      32'h6F,
      32'h4,
      32'h3,
      32'h0,
      32'h75706363,
      32'h4,
      32'h3,
      32'h0,
      32'h76,
      32'h63736972,
      32'h307465,
      32'h6B636F72,
      32'h2C657669,
      32'h6669731B,
      32'h15,
      32'h3,
      32'h0,
      32'h53,
      32'h4,
      32'h3,
      32'h0,
      32'h3040,
      32'h75706301,
      32'h40,
      32'h420F0040,
      32'h4,
      32'h3,
      32'h0,
      32'hF,
      32'h4,
      32'h3,
      32'h1,
      32'h0,
      32'h4,
      32'h3,
      32'h0,
      32'h73,
      32'h75706301,
      32'h2,
      32'h0,
      32'h30,
      32'h30303030,
      32'h30343640,
      32'h6C616972,
      32'h65732F63,
      32'h6F732F34,
      32'h15,
      32'h3,
      32'h0,
      32'h6E6573,
      32'h6F686301,
      32'h2,
      32'h0,
      32'h30,
      32'h30303030,
      32'h30343640,
      32'h6C616972,
      32'h65732F63,
      32'h6F732F2C,
      32'h15,
      32'h3,
      32'h0,
      32'h73657361,
      32'h696C6101,
      32'h0,
      32'h64,
      32'h72617970,
      32'h6968632C,
      32'h7261622D,
      32'h62637526,
      32'h11,
      32'h3,
      32'h0,
      32'h76,
      32'h65642D64,
      32'h72617970,
      32'h6968632C,
      32'h7261622D,
      32'h6263751B,
      32'h15,
      32'h3,
      32'h1,
      32'hF,
      32'h4,
      32'h3,
      32'h1,
      32'h0,
      32'h4,
      32'h3,
      32'h0,
      32'h1,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'hEC,
      32'hA000000,
      32'h2000000,
      32'h10,
      32'h11,
      32'h28,
      32'h24,
      32'hB000038,
      32'h24,
      32'hD0000ED,
      32'hFE0DD000,
      32'hA0D2121,
      32'h21646C72,
      32'h6F77206F,
      32'h6C6C6548,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h0,
      32'h6F,
      32'h100F,
      32'hFA1FF0EF,
      32'h5450513,
      32'h517,
      32'hE7A423,
      32'h100713,
      32'h640007B7,
      32'h112623,
      32'hFF010113,
      32'h8067,
      32'hFE06CEE3,
      32'h40E7A6AF,
      32'hA00713,
      32'h640007B7,
      32'hFE06CEE3,
      32'h40E7A6AF,
      32'hD00713,
      32'h640007B7,
      32'hFE0718E3,
      32'h150513,
      32'h154703,
      32'hFE06CEE3,
      32'h40E7A6AF,
      32'h640007B7,
      32'h70E63,
      32'h54703,
      32'hFE9FF06F,
      32'h48067,
      32'h800004B7,
      32'h54000EF,
      32'hF1402573,
      32'h7F010113,
      32'h80000137};	// @[BootROM.scala:53:47]
  assign auto_in_a_ready = auto_in_d_ready;
  assign auto_in_d_valid = auto_in_a_valid;
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data = (|(auto_in_a_bits_address[15:12])) ? 32'h0 : _GEN[auto_in_a_bits_address[11:2]];	// @[BootROM.scala:46:22, :51:34, :52:64, :53:{47,53}]
endmodule

