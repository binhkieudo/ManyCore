// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TSIToTileLink(
  input         clock,
                reset,
                auto_out_a_ready,
                auto_out_d_valid,
  input  [31:0] auto_out_d_bits_data,
  output        auto_out_a_valid,
  output [2:0]  auto_out_a_bits_opcode,
  output [3:0]  auto_out_a_bits_size,
  output [31:0] auto_out_a_bits_address,
  output [3:0]  auto_out_a_bits_mask,
  output [31:0] auto_out_a_bits_data,
  output        auto_out_d_ready
);

  reg  [63:0] addr;	// @[TSIToTileLink.scala:48:17]
  reg  [63:0] len;	// @[TSIToTileLink.scala:49:16]
  reg  [31:0] body_0;	// @[TSIToTileLink.scala:50:17]
  reg         bodyValid;	// @[TSIToTileLink.scala:51:22]
  reg         idx;	// @[TSIToTileLink.scala:52:16]
  reg  [3:0]  state;	// @[TSIToTileLink.scala:58:22]
  wire [63:0] _GEN = {32'h0, addr[31:2] + 30'h1, 2'h0};	// @[Cat.scala:33:92, TSIToTileLink.scala:48:17, :65:22, :66:31, :69:28]
  wire [65:0] len_size = {len + 64'h1, 2'h0};	// @[Cat.scala:33:92, TSIToTileLink.scala:49:16, :70:26]
  wire [65:0] _GEN_0 = {2'h0, _GEN - addr};	// @[Cat.scala:33:92, TSIToTileLink.scala:48:17, :69:28, :71:31]
  wire [65:0] raw_size = len_size < _GEN_0 ? len_size : _GEN_0;	// @[Cat.scala:33:92, TSIToTileLink.scala:71:{21,31}]
  wire [1:0]  rsize = raw_size == 66'h2 ? 2'h1 : {raw_size != 66'h1, 1'h0};	// @[Mux.scala:81:{58,61}, TSIToTileLink.scala:71:21]
  wire        pow2size = {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, raw_size[0]} + {1'h0, raw_size[1]}} + {1'h0, {1'h0, raw_size[2]} + {1'h0, raw_size[3]}}} + {1'h0, {1'h0, {1'h0, raw_size[4]} + {1'h0, raw_size[5]}} + {1'h0, {1'h0, raw_size[6]} + {1'h0, raw_size[7]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, raw_size[8]} + {1'h0, raw_size[9]}} + {1'h0, {1'h0, raw_size[10]} + {1'h0, raw_size[11]}}} + {1'h0, {1'h0, {1'h0, raw_size[12]} + {1'h0, raw_size[13]}} + {1'h0, {1'h0, raw_size[14]} + {1'h0, raw_size[15]}}}}} + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, raw_size[16]} + {1'h0, raw_size[17]}} + {1'h0, {1'h0, raw_size[18]} + {1'h0, raw_size[19]}}} + {1'h0, {1'h0, {1'h0, raw_size[20]} + {1'h0, raw_size[21]}} + {1'h0, {1'h0, raw_size[22]} + {1'h0, raw_size[23]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, raw_size[24]} + {1'h0, raw_size[25]}} + {1'h0, {1'h0, raw_size[26]} + {1'h0, raw_size[27]}}} + {1'h0, {1'h0, {1'h0, raw_size[28]} + {1'h0, raw_size[29]}} + {1'h0, {1'h0, raw_size[30]} + {1'h0, raw_size[31]} + {1'h0, raw_size[32]}}}}}} + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, raw_size[33]} + {1'h0, raw_size[34]}} + {1'h0, {1'h0, raw_size[35]} + {1'h0, raw_size[36]}}} + {1'h0, {1'h0, {1'h0, raw_size[37]} + {1'h0, raw_size[38]}} + {1'h0, {1'h0, raw_size[39]} + {1'h0, raw_size[40]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, raw_size[41]} + {1'h0, raw_size[42]}} + {1'h0, {1'h0, raw_size[43]} + {1'h0, raw_size[44]}}} + {1'h0, {1'h0, {1'h0, raw_size[45]} + {1'h0, raw_size[46]}} + {1'h0, {1'h0, raw_size[47]} + {1'h0, raw_size[48]}}}}} + {1'h0, {1'h0, {1'h0, {1'h0, {1'h0, raw_size[49]} + {1'h0, raw_size[50]}} + {1'h0, {1'h0, raw_size[51]} + {1'h0, raw_size[52]}}} + {1'h0, {1'h0, {1'h0, raw_size[53]} + {1'h0, raw_size[54]}} + {1'h0, {1'h0, raw_size[55]} + {1'h0, raw_size[56]}}}} + {1'h0, {1'h0, {1'h0, {1'h0, raw_size[57]} + {1'h0, raw_size[58]}} + {1'h0, {1'h0, raw_size[59]} + {1'h0, raw_size[60]}}} + {1'h0, {1'h0, {1'h0, raw_size[61]} + {1'h0, raw_size[62]}} + {1'h0, {1'h0, raw_size[63]} + {1'h0, raw_size[64]} + {1'h0, raw_size[65]}}}}}} == 7'h1;	// @[Bitwise.scala:51:90, :53:100, TSIToTileLink.scala:71:21, :75:37]
  wire [1:0]  byteAddr = pow2size ? addr[1:0] : 2'h0;	// @[Cat.scala:33:92, TSIToTileLink.scala:48:17, :75:37, :76:{21,36}]
  wire        get_acquire_a_mask_acc = rsize[1] | rsize[0] & ~(byteAddr[1]);	// @[Misc.scala:205:21, :209:26, :210:20, :214:{29,38}, Mux.scala:81:58, OneHot.scala:63:49, TSIToTileLink.scala:76:21]
  wire        get_acquire_a_mask_acc_1 = rsize[1] | rsize[0] & byteAddr[1];	// @[Misc.scala:205:21, :209:26, :214:{29,38}, Mux.scala:81:58, OneHot.scala:63:49, TSIToTileLink.scala:76:21]
  wire        _T_27 = state == 4'h7;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
  wire        _T_13 = state == 4'h3;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
  wire        _T_29 = state == 4'h8;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
  wire        _T_15 = state == 4'h4;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
  wire        _T_14 = _T_13 & auto_out_a_ready;	// @[TSIToTileLink.scala:133:30, package.scala:16:47]
  wire        _T_18 = state == 4'h5;	// @[TSIToTileLink.scala:58:22, :62:29]
  wire        _T_16 = _T_15 & auto_out_d_valid;	// @[TSIToTileLink.scala:137:31, package.scala:16:47]
  wire        _T_30 = _T_29 & auto_out_d_valid;	// @[TSIToTileLink.scala:166:31, package.scala:16:47]
  wire        _GEN_1 = _T_30 & (|len);	// @[TSIToTileLink.scala:49:16, :108:46, :137:47, :140:10, :147:15, :166:{31,47}, :167:24, :170:12]
  wire        _GEN_2 = ~_T_30 | ~(|len);	// @[TSIToTileLink.scala:49:16, :147:15, :151:52, :166:{31,47}, :167:{15,24}]
  always @(posedge clock) begin
    if (_GEN_1 | _T_16)	// @[TSIToTileLink.scala:108:46, :137:{31,47}, :140:10, :166:47, :167:24, :170:12]
      addr <= _GEN;	// @[TSIToTileLink.scala:48:17, :69:28]
    if (_GEN_1)	// @[TSIToTileLink.scala:108:46, :137:47, :140:10, :166:47, :167:24, :170:12]
      len <= len - 64'h1;	// @[TSIToTileLink.scala:49:16, :171:18]
    else if (_T_18)	// @[TSIToTileLink.scala:62:29]
      len <= len - 64'h1;	// @[TSIToTileLink.scala:49:16, :146:16]
    if (_T_16)	// @[TSIToTileLink.scala:137:31]
      body_0 <= auto_out_d_bits_data;	// @[TSIToTileLink.scala:50:17]
    bodyValid <= _GEN_2 & bodyValid;	// @[TSIToTileLink.scala:51:22, :151:52, :166:47, :167:24]
    idx <= _GEN_2 & (_T_18 ? idx - 1'h1 : ~_T_16 & idx);	// @[TSIToTileLink.scala:52:16, :62:29, :117:45, :137:{31,47}, :139:9, :144:52, :145:{9,16}, :151:52, :166:47, :167:24]
    if (reset)
      state <= 4'h0;	// @[TSIToTileLink.scala:58:22]
    else if (_T_30) begin	// @[TSIToTileLink.scala:166:31]
      if (|len)	// @[TSIToTileLink.scala:49:16, :147:15]
        state <= 4'h6;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
      else	// @[TSIToTileLink.scala:147:15]
        state <= 4'h0;	// @[TSIToTileLink.scala:58:22]
    end
    else if (_T_27 & auto_out_a_ready)	// @[TSIToTileLink.scala:162:32, package.scala:16:47]
      state <= 4'h8;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
    else if (_T_18) begin	// @[TSIToTileLink.scala:62:29]
      if (|len) begin	// @[TSIToTileLink.scala:49:16, :147:15]
        if (idx) begin	// @[TSIToTileLink.scala:52:16]
          if (_T_16)	// @[TSIToTileLink.scala:137:31]
            state <= 4'h5;	// @[TSIToTileLink.scala:58:22, :62:29]
          else if (_T_14)	// @[TSIToTileLink.scala:133:30]
            state <= 4'h4;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
        end
        else	// @[TSIToTileLink.scala:52:16]
          state <= 4'h3;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
      end
      else	// @[TSIToTileLink.scala:147:15]
        state <= 4'h0;	// @[TSIToTileLink.scala:58:22]
    end
    else if (_T_16)	// @[TSIToTileLink.scala:137:31]
      state <= 4'h5;	// @[TSIToTileLink.scala:58:22, :62:29]
    else if (_T_14)	// @[TSIToTileLink.scala:133:30]
      state <= 4'h4;	// @[TSIToTileLink.scala:58:22, package.scala:16:47]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    logic [31:0] _RANDOM_3;
    logic [31:0] _RANDOM_4;
    logic [31:0] _RANDOM_5;
    logic [31:0] _RANDOM_6;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        addr = {_RANDOM_1, _RANDOM_2};	// @[TSIToTileLink.scala:48:17]
        len = {_RANDOM_3, _RANDOM_4};	// @[TSIToTileLink.scala:49:16]
        body_0 = _RANDOM_5;	// @[TSIToTileLink.scala:50:17]
        bodyValid = _RANDOM_6[0];	// @[TSIToTileLink.scala:51:22]
        idx = _RANDOM_6[1];	// @[TSIToTileLink.scala:51:22, :52:16]
        state = _RANDOM_6[5:2];	// @[TSIToTileLink.scala:51:22, :58:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign auto_out_a_valid = _T_27 | _T_13;	// @[package.scala:16:47, :73:59]
  assign auto_out_a_bits_opcode = _T_27 ? 3'h1 : 3'h4;	// @[Edges.scala:455:15, :493:15, TSIToTileLink.scala:86:20, package.scala:16:47]
  assign auto_out_a_bits_size = _T_27 ? 4'h2 : {2'h0, rsize};	// @[Cat.scala:33:92, Edges.scala:457:15, Mux.scala:81:58, TSIToTileLink.scala:86:20, package.scala:16:47]
  assign auto_out_a_bits_address = {addr[31:2], _T_27 | ~pow2size ? 2'h0 : addr[1:0]};	// @[Cat.scala:33:92, TSIToTileLink.scala:48:17, :65:22, :75:37, :76:36, :86:20, package.scala:16:47]
  assign auto_out_a_bits_mask = _T_27 ? {4{bodyValid}} : {get_acquire_a_mask_acc_1 | (&byteAddr), get_acquire_a_mask_acc_1 | byteAddr[1] & ~(byteAddr[0]), get_acquire_a_mask_acc | ~(byteAddr[1]) & byteAddr[0], get_acquire_a_mask_acc | ~(byteAddr[1]) & ~(byteAddr[0])};	// @[Bitwise.scala:77:12, Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29, TSIToTileLink.scala:51:22, :76:21, :86:20, package.scala:16:47]
  assign auto_out_a_bits_data = _T_27 ? body_0 : 32'h0;	// @[TSIToTileLink.scala:50:17, :86:20, package.scala:16:47]
  assign auto_out_d_ready = _T_29 | _T_15;	// @[package.scala:16:47, :73:59]
endmodule

