// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLMonitor_3(
  input        clock,
               reset,
               io_in_a_ready,
               io_in_a_valid,
  input [2:0]  io_in_a_bits_opcode,
               io_in_a_bits_param,
  input [3:0]  io_in_a_bits_size,
  input [1:0]  io_in_a_bits_source,
  input [31:0] io_in_a_bits_address,
  input [7:0]  io_in_a_bits_mask,
  input        io_in_a_bits_corrupt,
               io_in_b_valid,
  input [1:0]  io_in_b_bits_param,
  input [3:0]  io_in_b_bits_size,
  input [1:0]  io_in_b_bits_source,
  input [31:0] io_in_b_bits_address,
  input        io_in_c_ready,
               io_in_c_valid,
  input [2:0]  io_in_c_bits_opcode,
               io_in_c_bits_param,
  input [3:0]  io_in_c_bits_size,
  input [1:0]  io_in_c_bits_source,
  input [31:0] io_in_c_bits_address,
  input        io_in_c_bits_corrupt,
               io_in_d_ready,
               io_in_d_valid,
  input [2:0]  io_in_d_bits_opcode,
  input [1:0]  io_in_d_bits_param,
  input [3:0]  io_in_d_bits_size,
  input [1:0]  io_in_d_bits_source,
  input [2:0]  io_in_d_bits_sink,
  input        io_in_d_bits_denied,
               io_in_d_bits_corrupt,
               io_in_e_valid,
  input [2:0]  io_in_e_bits_sink
);

  wire [31:0] _plusarg_reader_1_out;	// @[PlusArg.scala:80:11]
  wire [31:0] _plusarg_reader_out;	// @[PlusArg.scala:80:11]
  wire [26:0] _GEN = {23'h0, io_in_a_bits_size};	// @[package.scala:235:71]
  wire [26:0] _GEN_0 = {23'h0, io_in_c_bits_size};	// @[package.scala:235:71]
  wire        _T_2453 = io_in_a_ready & io_in_a_valid;	// @[Decoupled.scala:51:35]
  reg  [8:0]  a_first_counter;	// @[Edges.scala:229:27]
  reg  [2:0]  opcode;	// @[Monitor.scala:384:22]
  reg  [2:0]  param;	// @[Monitor.scala:385:22]
  reg  [3:0]  size;	// @[Monitor.scala:386:22]
  reg  [1:0]  source;	// @[Monitor.scala:387:22]
  reg  [31:0] address;	// @[Monitor.scala:388:22]
  wire        _T_2527 = io_in_d_ready & io_in_d_valid;	// @[Decoupled.scala:51:35]
  reg  [8:0]  d_first_counter;	// @[Edges.scala:229:27]
  reg  [2:0]  opcode_1;	// @[Monitor.scala:535:22]
  reg  [1:0]  param_1;	// @[Monitor.scala:536:22]
  reg  [3:0]  size_1;	// @[Monitor.scala:537:22]
  reg  [1:0]  source_1;	// @[Monitor.scala:538:22]
  reg  [2:0]  sink;	// @[Monitor.scala:539:22]
  reg         denied;	// @[Monitor.scala:540:22]
  wire        _T_2524 = io_in_c_ready & io_in_c_valid;	// @[Decoupled.scala:51:35]
  reg  [8:0]  c_first_counter;	// @[Edges.scala:229:27]
  reg  [2:0]  opcode_3;	// @[Monitor.scala:512:22]
  reg  [2:0]  param_3;	// @[Monitor.scala:513:22]
  reg  [3:0]  size_3;	// @[Monitor.scala:514:22]
  reg  [1:0]  source_3;	// @[Monitor.scala:515:22]
  reg  [31:0] address_2;	// @[Monitor.scala:516:22]
  reg  [2:0]  inflight;	// @[Monitor.scala:611:27]
  reg  [11:0] inflight_opcodes;	// @[Monitor.scala:613:35]
  reg  [23:0] inflight_sizes;	// @[Monitor.scala:615:33]
  reg  [8:0]  a_first_counter_1;	// @[Edges.scala:229:27]
  wire        a_first_1 = a_first_counter_1 == 9'h0;	// @[Edges.scala:229:27, :231:25]
  reg  [8:0]  d_first_counter_1;	// @[Edges.scala:229:27]
  wire        d_first_1 = d_first_counter_1 == 9'h0;	// @[Edges.scala:229:27, :231:25]
  wire [3:0]  _GEN_1 = {2'h0, io_in_a_bits_source};	// @[Mux.scala:27:73, OneHot.scala:57:35]
  wire        _T_2377 = _T_2453 & a_first_1;	// @[Decoupled.scala:51:35, Edges.scala:231:25, Monitor.scala:652:27]
  wire        d_release_ack = io_in_d_bits_opcode == 3'h6;	// @[Monitor.scala:670:46]
  wire [3:0]  _GEN_2 = {2'h0, io_in_d_bits_source};	// @[Mux.scala:27:73, OneHot.scala:57:35]
  reg  [31:0] watchdog;	// @[Monitor.scala:706:27]
  reg  [2:0]  inflight_1;	// @[Monitor.scala:723:35]
  reg  [23:0] inflight_sizes_1;	// @[Monitor.scala:725:35]
  reg  [8:0]  c_first_counter_1;	// @[Edges.scala:229:27]
  wire        c_first_1 = c_first_counter_1 == 9'h0;	// @[Edges.scala:229:27, :231:25]
  reg  [8:0]  d_first_counter_2;	// @[Edges.scala:229:27]
  wire        d_first_2 = d_first_counter_2 == 9'h0;	// @[Edges.scala:229:27, :231:25]
  wire [3:0]  _GEN_3 = {2'h0, io_in_c_bits_source};	// @[Mux.scala:27:73, OneHot.scala:57:35]
  wire        _T_2466 = _T_2524 & c_first_1 & io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1];	// @[Decoupled.scala:51:35, Edges.scala:68:{36,51}, :231:25, Monitor.scala:760:38]
  reg  [31:0] watchdog_1;	// @[Monitor.scala:815:27]
  reg  [7:0]  inflight_2;	// @[Monitor.scala:825:27]
  reg  [8:0]  d_first_counter_3;	// @[Edges.scala:229:27]
  wire        d_first_3 = d_first_counter_3 == 9'h0;	// @[Edges.scala:229:27, :231:25]
  wire        _T_2533 = _T_2527 & d_first_3 & io_in_d_bits_opcode[2] & ~(io_in_d_bits_opcode[1]);	// @[Decoupled.scala:51:35, Edges.scala:71:{36,43,52}, :231:25, Monitor.scala:831:38]
  wire [7:0]  _GEN_4 = {5'h0, io_in_d_bits_sink};	// @[Monitor.scala:645:38, OneHot.scala:57:35]
  wire [7:0]  d_set = _T_2533 ? 8'h1 << _GEN_4 : 8'h0;	// @[Monitor.scala:636:33, :830:25, :831:{38,72}, :832:13, OneHot.scala:57:35]
  wire [7:0]  _GEN_5 = {5'h0, io_in_e_bits_sink};	// @[Monitor.scala:645:38, OneHot.scala:57:35]
  wire [26:0] _a_first_beats1_decode_T_1 = 27'hFFF << _GEN;	// @[package.scala:235:71]
  wire [26:0] _a_first_beats1_decode_T_5 = 27'hFFF << _GEN;	// @[package.scala:235:71]
  wire [26:0] _GEN_6 = {23'h0, io_in_d_bits_size};	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_1 = 27'hFFF << _GEN_6;	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_5 = 27'hFFF << _GEN_6;	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_9 = 27'hFFF << _GEN_6;	// @[package.scala:235:71]
  wire [26:0] _d_first_beats1_decode_T_13 = 27'hFFF << _GEN_6;	// @[package.scala:235:71]
  wire [26:0] _c_first_beats1_decode_T_1 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
  wire [26:0] _c_first_beats1_decode_T_5 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
  wire        _T_2392 = _T_2527 & d_first_1 & ~d_release_ack;	// @[Decoupled.scala:51:35, Edges.scala:231:25, Monitor.scala:670:46, :671:74, :675:72]
  wire [46:0] _GEN_7 = {42'h0, io_in_d_bits_source, 3'h0};	// @[Misc.scala:201:34, Monitor.scala:677:76, :678:74]
  wire        _T_2479 = _T_2527 & d_first_2 & d_release_ack;	// @[Decoupled.scala:51:35, Edges.scala:231:25, Monitor.scala:670:46, :785:72]
  wire [3:0]  _d_clr_T = 4'h1 << _GEN_2;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
  wire [3:0]  _a_set_T = 4'h1 << _GEN_1;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
  wire [46:0] _d_opcodes_clr_T_5 = 47'hF << {43'h0, io_in_d_bits_source, 2'h0};	// @[Monitor.scala:677:76, Mux.scala:27:73]
  wire [34:0] _a_opcodes_set_T_1 = {31'h0, _T_2377 ? {io_in_a_bits_opcode, 1'h1} : 4'h0} << {31'h0, io_in_a_bits_source, 2'h0};	// @[Monitor.scala:42:11, :632:35, :643:40, :652:{27,72}, :654:{28,53}, :656:54, Mux.scala:27:73]
  wire [46:0] _d_sizes_clr_T_5 = 47'hFF << _GEN_7;	// @[Monitor.scala:678:74]
  wire [35:0] _a_sizes_set_T_1 = {31'h0, _T_2377 ? {io_in_a_bits_size, 1'h1} : 5'h0} << {31'h0, io_in_a_bits_source, 3'h0};	// @[Misc.scala:201:34, Monitor.scala:42:11, :645:38, :652:{27,72}, :655:{28,51}, :656:54, :657:52]
  wire [3:0]  _d_clr_T_1 = 4'h1 << _GEN_2;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
  wire [3:0]  _c_set_T = 4'h1 << _GEN_3;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
  wire [46:0] _d_sizes_clr_T_11 = 47'hFF << _GEN_7;	// @[Monitor.scala:678:74, :788:74]
  wire [35:0] _c_sizes_set_T_1 = {31'h0, _T_2466 ? {io_in_c_bits_size, 1'h1} : 5'h0} << {31'h0, io_in_c_bits_source, 3'h0};	// @[Misc.scala:201:34, Monitor.scala:42:11, :645:38, :656:54, :752:40, :760:{38,72}, :763:{28,51}, :765:52]
  always @(posedge clock) begin
    if (reset) begin
      a_first_counter <= 9'h0;	// @[Edges.scala:229:27]
      d_first_counter <= 9'h0;	// @[Edges.scala:229:27]
      c_first_counter <= 9'h0;	// @[Edges.scala:229:27]
      inflight <= 3'h0;	// @[Misc.scala:201:34, Monitor.scala:611:27]
      inflight_opcodes <= 12'h0;	// @[Monitor.scala:613:35]
      inflight_sizes <= 24'h0;	// @[Monitor.scala:615:33]
      a_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
      d_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
      watchdog <= 32'h0;	// @[Monitor.scala:706:27]
      inflight_1 <= 3'h0;	// @[Misc.scala:201:34, Monitor.scala:723:35]
      inflight_sizes_1 <= 24'h0;	// @[Monitor.scala:615:33, :725:35]
      c_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
      d_first_counter_2 <= 9'h0;	// @[Edges.scala:229:27]
      watchdog_1 <= 32'h0;	// @[Monitor.scala:706:27, :815:27]
      inflight_2 <= 8'h0;	// @[Monitor.scala:636:33, :825:27]
      d_first_counter_3 <= 9'h0;	// @[Edges.scala:229:27]
    end
    else begin
      if (_T_2453) begin	// @[Decoupled.scala:51:35]
        if (|a_first_counter)	// @[Edges.scala:229:27, :231:25]
          a_first_counter <= a_first_counter - 9'h1;	// @[Edges.scala:229:27, :230:28]
        else if (io_in_a_bits_opcode[2])	// @[Edges.scala:92:37]
          a_first_counter <= 9'h0;	// @[Edges.scala:229:27]
        else	// @[Edges.scala:92:37]
          a_first_counter <= ~(_a_first_beats1_decode_T_1[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
        if (a_first_1) begin	// @[Edges.scala:231:25]
          if (io_in_a_bits_opcode[2])	// @[Edges.scala:92:37]
            a_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
          else	// @[Edges.scala:92:37]
            a_first_counter_1 <= ~(_a_first_beats1_decode_T_5[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
        end
        else	// @[Edges.scala:231:25]
          a_first_counter_1 <= a_first_counter_1 - 9'h1;	// @[Edges.scala:229:27, :230:28]
      end
      if (_T_2527) begin	// @[Decoupled.scala:51:35]
        if (|d_first_counter)	// @[Edges.scala:229:27, :231:25]
          d_first_counter <= d_first_counter - 9'h1;	// @[Edges.scala:229:27, :230:28]
        else if (io_in_d_bits_opcode[0])	// @[Edges.scala:106:36]
          d_first_counter <= ~(_d_first_beats1_decode_T_1[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
        else	// @[Edges.scala:106:36]
          d_first_counter <= 9'h0;	// @[Edges.scala:229:27]
        if (d_first_1) begin	// @[Edges.scala:231:25]
          if (io_in_d_bits_opcode[0])	// @[Edges.scala:106:36]
            d_first_counter_1 <= ~(_d_first_beats1_decode_T_5[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:106:36]
            d_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          d_first_counter_1 <= d_first_counter_1 - 9'h1;	// @[Edges.scala:229:27, :230:28]
        if (d_first_2) begin	// @[Edges.scala:231:25]
          if (io_in_d_bits_opcode[0])	// @[Edges.scala:106:36]
            d_first_counter_2 <= ~(_d_first_beats1_decode_T_9[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:106:36]
            d_first_counter_2 <= 9'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          d_first_counter_2 <= d_first_counter_2 - 9'h1;	// @[Edges.scala:229:27, :230:28]
        if (d_first_3) begin	// @[Edges.scala:231:25]
          if (io_in_d_bits_opcode[0])	// @[Edges.scala:106:36]
            d_first_counter_3 <= ~(_d_first_beats1_decode_T_13[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:106:36]
            d_first_counter_3 <= 9'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          d_first_counter_3 <= d_first_counter_3 - 9'h1;	// @[Edges.scala:229:27, :230:28]
      end
      if (_T_2524) begin	// @[Decoupled.scala:51:35]
        if (|c_first_counter)	// @[Edges.scala:229:27, :231:25]
          c_first_counter <= c_first_counter - 9'h1;	// @[Edges.scala:229:27, :230:28]
        else if (io_in_c_bits_opcode[0])	// @[Edges.scala:102:36]
          c_first_counter <= ~(_c_first_beats1_decode_T_1[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
        else	// @[Edges.scala:102:36]
          c_first_counter <= 9'h0;	// @[Edges.scala:229:27]
        if (c_first_1) begin	// @[Edges.scala:231:25]
          if (io_in_c_bits_opcode[0])	// @[Edges.scala:102:36]
            c_first_counter_1 <= ~(_c_first_beats1_decode_T_5[11:3]);	// @[Edges.scala:229:27, package.scala:235:{46,71,76}]
          else	// @[Edges.scala:102:36]
            c_first_counter_1 <= 9'h0;	// @[Edges.scala:229:27]
        end
        else	// @[Edges.scala:231:25]
          c_first_counter_1 <= c_first_counter_1 - 9'h1;	// @[Edges.scala:229:27, :230:28]
      end
      inflight <= (inflight | (_T_2377 ? _a_set_T[2:0] : 3'h0)) & ~(_T_2392 ? _d_clr_T[2:0] : 3'h0);	// @[Misc.scala:201:34, Monitor.scala:611:27, :623:34, :652:{27,72}, :653:28, :661:34, :675:{72,91}, :676:21, :702:{27,36,38}, OneHot.scala:57:35]
      inflight_opcodes <= (inflight_opcodes | (_T_2377 ? _a_opcodes_set_T_1[11:0] : 12'h0)) & ~(_T_2392 ? _d_opcodes_clr_T_5[11:0] : 12'h0);	// @[Monitor.scala:613:35, :627:33, :652:{27,72}, :656:{28,54}, :665:33, :675:{72,91}, :677:{21,76}, :703:{43,60,62}]
      inflight_sizes <= (inflight_sizes | (_T_2377 ? _a_sizes_set_T_1[23:0] : 24'h0)) & ~(_T_2392 ? _d_sizes_clr_T_5[23:0] : 24'h0);	// @[Monitor.scala:615:33, :629:31, :652:{27,72}, :657:{28,52}, :667:31, :675:{72,91}, :678:{21,74}, :704:{39,54,56}]
      if (_T_2453 | _T_2527)	// @[Decoupled.scala:51:35, Monitor.scala:712:27]
        watchdog <= 32'h0;	// @[Monitor.scala:706:27]
      else	// @[Monitor.scala:712:27]
        watchdog <= watchdog + 32'h1;	// @[Monitor.scala:706:27, :711:26]
      inflight_1 <= (inflight_1 | (_T_2466 ? _c_set_T[2:0] : 3'h0)) & ~(_T_2479 ? _d_clr_T_1[2:0] : 3'h0);	// @[Misc.scala:201:34, Monitor.scala:723:35, :735:34, :760:{38,72}, :761:28, :771:34, :785:{72,90}, :786:21, :811:{35,44,46}, OneHot.scala:57:35]
      inflight_sizes_1 <= (inflight_sizes_1 | (_T_2466 ? _c_sizes_set_T_1[23:0] : 24'h0)) & ~(_T_2479 ? _d_sizes_clr_T_11[23:0] : 24'h0);	// @[Monitor.scala:615:33, :725:35, :738:34, :760:{38,72}, :765:{28,52}, :774:34, :785:{72,90}, :788:{21,74}, :813:{41,56,58}]
      if (_T_2524 | _T_2527)	// @[Decoupled.scala:51:35, Monitor.scala:821:27]
        watchdog_1 <= 32'h0;	// @[Monitor.scala:706:27, :815:27]
      else	// @[Monitor.scala:821:27]
        watchdog_1 <= watchdog_1 + 32'h1;	// @[Monitor.scala:711:26, :815:27, :820:26]
      inflight_2 <= (inflight_2 | d_set) & ~(io_in_e_valid ? 8'h1 << _GEN_5 : 8'h0);	// @[Monitor.scala:636:33, :825:27, :830:25, :831:72, :832:13, :836:25, :837:73, :838:13, :844:{27,36,38}, OneHot.scala:57:35]
    end
    if (_T_2453 & ~(|a_first_counter)) begin	// @[Decoupled.scala:51:35, Edges.scala:229:27, :231:25, Monitor.scala:396:20]
      opcode <= io_in_a_bits_opcode;	// @[Monitor.scala:384:22]
      param <= io_in_a_bits_param;	// @[Monitor.scala:385:22]
      size <= io_in_a_bits_size;	// @[Monitor.scala:386:22]
      source <= io_in_a_bits_source;	// @[Monitor.scala:387:22]
      address <= io_in_a_bits_address;	// @[Monitor.scala:388:22]
    end
    if (_T_2527 & ~(|d_first_counter)) begin	// @[Decoupled.scala:51:35, Edges.scala:229:27, :231:25, Monitor.scala:549:20]
      opcode_1 <= io_in_d_bits_opcode;	// @[Monitor.scala:535:22]
      param_1 <= io_in_d_bits_param;	// @[Monitor.scala:536:22]
      size_1 <= io_in_d_bits_size;	// @[Monitor.scala:537:22]
      source_1 <= io_in_d_bits_source;	// @[Monitor.scala:538:22]
      sink <= io_in_d_bits_sink;	// @[Monitor.scala:539:22]
      denied <= io_in_d_bits_denied;	// @[Monitor.scala:540:22]
    end
    if (_T_2524 & ~(|c_first_counter)) begin	// @[Decoupled.scala:51:35, Edges.scala:229:27, :231:25, Monitor.scala:524:20]
      opcode_3 <= io_in_c_bits_opcode;	// @[Monitor.scala:512:22]
      param_3 <= io_in_c_bits_param;	// @[Monitor.scala:513:22]
      size_3 <= io_in_c_bits_size;	// @[Monitor.scala:514:22]
      source_3 <= io_in_c_bits_source;	// @[Monitor.scala:515:22]
      address_2 <= io_in_c_bits_address;	// @[Monitor.scala:516:22]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    wire  [7:0][2:0] _GEN_8 = '{3'h4, 3'h5, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:686:39]
    wire  [7:0][2:0] _GEN_9 = '{3'h4, 3'h4, 3'h2, 3'h1, 3'h1, 3'h1, 3'h0, 3'h0};	// @[Monitor.scala:685:38]
    wire             _WIRE_2_0 = io_in_a_bits_source == 2'h0;	// @[Mux.scala:27:73, Parameters.scala:46:9]
    wire             _source_ok_WIRE_1 = io_in_a_bits_source == 2'h1;	// @[Parameters.scala:46:9]
    wire             _source_ok_WIRE_2 = io_in_a_bits_source == 2'h2;	// @[Parameters.scala:46:9]
    wire             source_ok = _WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2;	// @[Parameters.scala:46:9, :1126:46]
    wire  [26:0]     _is_aligned_mask_T_1 = 27'hFFF << _GEN;	// @[package.scala:235:71]
    wire  [11:0]     _GEN_10 = io_in_a_bits_address[11:0] & ~(_is_aligned_mask_T_1[11:0]);	// @[Edges.scala:21:16, package.scala:235:{46,71,76}]
    wire             _T_375 = io_in_a_bits_size > 4'h2;	// @[Misc.scala:205:21]
    wire             mask_size = io_in_a_bits_size[1:0] == 2'h2;	// @[Misc.scala:208:26, OneHot.scala:63:49, Parameters.scala:46:9]
    wire             mask_acc = _T_375 | mask_size & ~(io_in_a_bits_address[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}]
    wire             mask_acc_1 = _T_375 | mask_size & io_in_a_bits_address[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}]
    wire             mask_size_1 = io_in_a_bits_size[1:0] == 2'h1;	// @[Misc.scala:208:26, OneHot.scala:63:49, Parameters.scala:46:9]
    wire             mask_eq_2 = ~(io_in_a_bits_address[2]) & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_2 = mask_acc | mask_size_1 & mask_eq_2;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_3 = ~(io_in_a_bits_address[2]) & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_3 = mask_acc | mask_size_1 & mask_eq_3;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_4 = io_in_a_bits_address[2] & ~(io_in_a_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_4 = mask_acc_1 | mask_size_1 & mask_eq_4;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_5 = io_in_a_bits_address[2] & io_in_a_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_5 = mask_acc_1 | mask_size_1 & mask_eq_5;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire  [7:0]      mask = {mask_acc_5 | mask_eq_5 & io_in_a_bits_address[0], mask_acc_5 | mask_eq_5 & ~(io_in_a_bits_address[0]), mask_acc_4 | mask_eq_4 & io_in_a_bits_address[0], mask_acc_4 | mask_eq_4 & ~(io_in_a_bits_address[0]), mask_acc_3 | mask_eq_3 & io_in_a_bits_address[0], mask_acc_3 | mask_eq_3 & ~(io_in_a_bits_address[0]), mask_acc_2 | mask_eq_2 & io_in_a_bits_address[0], mask_acc_2 | mask_eq_2 & ~(io_in_a_bits_address[0])};	// @[Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29]
    wire             _GEN_11 = io_in_a_valid & io_in_a_bits_opcode == 3'h6;	// @[Monitor.scala:81:{25,54}]
    wire             _T_125 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _T_116 = io_in_a_bits_size == 4'h6;	// @[Parameters.scala:91:48]
    wire  [18:0]     _GEN_12 = {io_in_a_bits_address[31:17] ^ 15'h8, io_in_a_bits_address[15:12]};	// @[Parameters.scala:137:{31,45}]
    wire             _GEN_13 = io_in_a_bits_param > 3'h2;	// @[Bundles.scala:111:27, Monitor.scala:640:42]
    wire             _GEN_14 = io_in_a_valid & (&io_in_a_bits_opcode);	// @[Monitor.scala:92:{25,53}]
    wire             _T_306 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _T_297 = io_in_a_bits_size == 4'h6;	// @[Parameters.scala:91:48]
    wire             _GEN_15 = io_in_a_valid & io_in_a_bits_opcode == 3'h4;	// @[Monitor.scala:104:{25,45}]
    wire             _T_416 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _GEN_16 = io_in_a_bits_mask != mask;	// @[Cat.scala:33:92, Monitor.scala:110:30]
    wire             _GEN_17 = io_in_a_valid & io_in_a_bits_opcode == 3'h0;	// @[Misc.scala:201:34, Monitor.scala:114:{25,53}]
    wire             _T_518 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _GEN_18 = io_in_a_valid & io_in_a_bits_opcode == 3'h1;	// @[Misc.scala:201:81, Monitor.scala:122:{25,56}]
    wire             _T_619 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _GEN_19 = io_in_a_valid & io_in_a_bits_opcode == 3'h2;	// @[Monitor.scala:130:{25,56}, :640:42]
    wire             _GEN_20 = io_in_a_valid & io_in_a_bits_opcode == 3'h3;	// @[Bundles.scala:148:30, Monitor.scala:138:{25,53}]
    wire             _GEN_21 = io_in_a_valid & io_in_a_bits_opcode == 3'h5;	// @[Monitor.scala:146:{25,46}]
    wire             _T_914 = io_in_a_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             source_ok_1 = io_in_d_bits_source == 2'h0 | io_in_d_bits_source == 2'h1 | io_in_d_bits_source == 2'h2;	// @[Mux.scala:27:73, Parameters.scala:46:9, :1126:46]
    wire             _GEN_22 = io_in_d_valid & io_in_d_bits_opcode == 3'h6;	// @[Monitor.scala:310:{25,52}]
    wire             _GEN_23 = io_in_d_bits_size < 4'h3;	// @[Misc.scala:205:21, Monitor.scala:312:27]
    wire             _GEN_24 = io_in_d_valid & io_in_d_bits_opcode == 3'h4;	// @[Monitor.scala:104:25, :318:{25,47}]
    wire             _GEN_25 = io_in_d_bits_param == 2'h2;	// @[Monitor.scala:323:28, Parameters.scala:46:9]
    wire             _GEN_26 = io_in_d_valid & io_in_d_bits_opcode == 3'h5;	// @[Monitor.scala:146:25, :328:{25,51}]
    wire             _GEN_27 = io_in_d_valid & io_in_d_bits_opcode == 3'h0;	// @[Misc.scala:201:34, Monitor.scala:338:{25,51}]
    wire             _GEN_28 = io_in_d_valid & io_in_d_bits_opcode == 3'h1;	// @[Misc.scala:201:81, Monitor.scala:346:{25,55}]
    wire             _GEN_29 = io_in_d_valid & io_in_d_bits_opcode == 3'h2;	// @[Monitor.scala:354:{25,49}, :640:42]
    wire             _mask_T_1 = io_in_b_bits_size > 4'h2;	// @[Misc.scala:205:21]
    wire             mask_size_3 = io_in_b_bits_size[1:0] == 2'h2;	// @[Misc.scala:208:26, OneHot.scala:63:49, Parameters.scala:46:9]
    wire             mask_acc_14 = _mask_T_1 | mask_size_3 & ~(io_in_b_bits_address[2]);	// @[Misc.scala:205:21, :208:26, :209:26, :210:20, :214:{29,38}]
    wire             mask_acc_15 = _mask_T_1 | mask_size_3 & io_in_b_bits_address[2];	// @[Misc.scala:205:21, :208:26, :209:26, :214:{29,38}]
    wire             mask_size_4 = io_in_b_bits_size[1:0] == 2'h1;	// @[Misc.scala:208:26, OneHot.scala:63:49, Parameters.scala:46:9]
    wire             mask_eq_16 = ~(io_in_b_bits_address[2]) & ~(io_in_b_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_16 = mask_acc_14 | mask_size_4 & mask_eq_16;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_17 = ~(io_in_b_bits_address[2]) & io_in_b_bits_address[1];	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_17 = mask_acc_14 | mask_size_4 & mask_eq_17;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_18 = io_in_b_bits_address[2] & ~(io_in_b_bits_address[1]);	// @[Misc.scala:209:26, :210:20, :213:27]
    wire             mask_acc_18 = mask_acc_15 | mask_size_4 & mask_eq_18;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             mask_eq_19 = io_in_b_bits_address[2] & io_in_b_bits_address[1];	// @[Misc.scala:209:26, :213:27]
    wire             mask_acc_19 = mask_acc_15 | mask_size_4 & mask_eq_19;	// @[Misc.scala:208:26, :213:27, :214:{29,38}]
    wire             _WIRE_8_0 = io_in_c_bits_source == 2'h0;	// @[Mux.scala:27:73, Parameters.scala:46:9]
    wire             _source_ok_WIRE_2_1 = io_in_c_bits_source == 2'h1;	// @[Parameters.scala:46:9]
    wire             _source_ok_WIRE_2_2 = io_in_c_bits_source == 2'h2;	// @[Parameters.scala:46:9]
    wire             source_ok_2 = _WIRE_8_0 | _source_ok_WIRE_2_1 | _source_ok_WIRE_2_2;	// @[Parameters.scala:46:9, :1126:46]
    wire  [26:0]     _is_aligned_mask_T_7 = 27'hFFF << _GEN_0;	// @[package.scala:235:71]
    wire  [11:0]     _GEN_30 = io_in_c_bits_address[11:0] & ~(_is_aligned_mask_T_7[11:0]);	// @[Edges.scala:21:16, package.scala:235:{46,71,76}]
    wire             address_ok_1 = io_in_c_bits_address[31:12] == 20'h3 | io_in_c_bits_address[31:12] == 20'h2010 | io_in_c_bits_address[31:12] == 20'h4 | io_in_c_bits_address[31:12] == 20'h54000 | io_in_c_bits_address[31:12] == 20'h1 | io_in_c_bits_address[31:26] == 6'h3 | io_in_c_bits_address[31:16] == 16'h200 | io_in_c_bits_address[31:12] == 20'h0 | io_in_c_bits_address[31:16] == 16'h1 | io_in_c_bits_address[31:12] == 20'h100 | io_in_c_bits_address[31:12] == 20'h110 | io_in_c_bits_address[31:28] == 4'h8;	// @[Edges.scala:21:16, Parameters.scala:137:{31,65}, :623:64]
    wire             _GEN_31 = io_in_c_valid & io_in_c_bits_opcode == 3'h4;	// @[Monitor.scala:104:25, :242:{25,50}]
    wire             _GEN_32 = io_in_c_bits_size < 4'h3;	// @[Misc.scala:205:21, Monitor.scala:245:30]
    wire             _GEN_33 = io_in_c_valid & io_in_c_bits_opcode == 3'h5;	// @[Monitor.scala:146:25, :251:{25,54}]
    wire             _GEN_34 = io_in_c_valid & io_in_c_bits_opcode == 3'h6;	// @[Monitor.scala:259:{25,49}]
    wire             _T_1964 = io_in_c_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _T_1955 = io_in_c_bits_size == 4'h6;	// @[Parameters.scala:91:48]
    wire  [18:0]     _GEN_35 = {io_in_c_bits_address[31:17] ^ 15'h8, io_in_c_bits_address[15:12]};	// @[Parameters.scala:137:{31,45}]
    wire             _GEN_36 = io_in_c_valid & (&io_in_c_bits_opcode);	// @[Monitor.scala:269:{25,53}]
    wire             _T_2140 = io_in_c_bits_size < 4'hD;	// @[Parameters.scala:92:42]
    wire             _T_2131 = io_in_c_bits_size == 4'h6;	// @[Parameters.scala:91:48]
    wire             _GEN_37 = io_in_c_valid & io_in_c_bits_opcode == 3'h0;	// @[Misc.scala:201:34, Monitor.scala:278:{25,51}]
    wire             _GEN_38 = io_in_c_valid & io_in_c_bits_opcode == 3'h1;	// @[Misc.scala:201:81, Monitor.scala:286:{25,55}]
    wire             _GEN_39 = io_in_c_valid & io_in_c_bits_opcode == 3'h2;	// @[Monitor.scala:293:{25,49}, :640:42]
    wire             _T_2274 = io_in_a_valid & (|a_first_counter);	// @[Edges.scala:229:27, :231:25, Monitor.scala:389:19]
    wire             _T_2298 = io_in_d_valid & (|d_first_counter);	// @[Edges.scala:229:27, :231:25, Monitor.scala:541:19]
    wire             _T_2350 = io_in_c_valid & (|c_first_counter);	// @[Edges.scala:229:27, :231:25, Monitor.scala:517:19]
    wire  [11:0]     _a_opcode_lookup_T_1 = inflight_opcodes >> {8'h0, io_in_d_bits_source, 2'h0};	// @[Monitor.scala:613:35, :634:44, :636:33, Mux.scala:27:73]
    wire  [23:0]     _GEN_40 = {19'h0, io_in_d_bits_source, 3'h0};	// @[Misc.scala:201:34, Monitor.scala:638:40]
    wire             _same_cycle_resp_T_1 = io_in_a_valid & a_first_1;	// @[Edges.scala:231:25, Monitor.scala:648:26]
    wire  [3:0]      _a_set_wo_ready_T = 4'h1 << _GEN_1;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
    wire  [2:0]      a_set_wo_ready = _same_cycle_resp_T_1 ? _a_set_wo_ready_T[2:0] : 3'h0;	// @[Misc.scala:201:34, Monitor.scala:624:34, :648:{26,71}, :649:22, OneHot.scala:57:35]
    wire             _T_2425 = io_in_d_valid & d_first_1;	// @[Edges.scala:231:25, Monitor.scala:671:26]
    wire             _T_2396 = _T_2425 & ~d_release_ack;	// @[Monitor.scala:670:46, :671:{26,74}, :680:71]
    wire             same_cycle_resp = _same_cycle_resp_T_1 & io_in_a_bits_source == io_in_d_bits_source;	// @[Monitor.scala:648:26, :681:{88,113}]
    wire  [2:0]      _GEN_41 = {1'h0, io_in_d_bits_source};	// @[Monitor.scala:682:25]
    wire             _GEN_42 = _T_2396 & same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire             _GEN_43 = _T_2396 & ~same_cycle_resp;	// @[Monitor.scala:680:71, :681:88, :684:30]
    wire  [7:0]      _GEN_44 = {4'h0, io_in_d_bits_size};	// @[Monitor.scala:632:35, :691:36]
    wire             _same_cycle_resp_T_3 = io_in_c_valid & c_first_1;	// @[Edges.scala:231:25, Monitor.scala:756:26]
    wire  [3:0]      _c_set_wo_ready_T = 4'h1 << _GEN_3;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
    wire  [2:0]      c_set_wo_ready = _same_cycle_resp_T_3 & io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1] ? _c_set_wo_ready_T[2:0] : 3'h0;	// @[Edges.scala:68:{36,51}, Misc.scala:201:34, Monitor.scala:736:34, :756:{26,37,71}, :757:22, OneHot.scala:57:35]
    wire             _T_2497 = io_in_d_valid & d_first_2;	// @[Edges.scala:231:25, Monitor.scala:781:26]
    wire             _T_2482 = _T_2497 & d_release_ack;	// @[Monitor.scala:670:46, :781:26, :791:71]
    wire             same_cycle_resp_1 = _same_cycle_resp_T_3 & io_in_c_bits_opcode[2] & io_in_c_bits_opcode[1] & io_in_c_bits_source == io_in_d_bits_source;	// @[Edges.scala:68:{36,51}, Monitor.scala:756:26, :792:{88,113}]
    wire  [26:0]     _is_aligned_mask_T_4 = 27'hFFF << io_in_b_bits_size;	// @[package.scala:235:71]
    wire  [2:0]      _T_2378 = inflight >> io_in_a_bits_source;	// @[Monitor.scala:611:27, :658:26]
    wire  [2:0]      _T_2397 = inflight >> _GEN_41;	// @[Monitor.scala:611:27, :682:25]
    wire  [23:0]     _a_size_lookup_T_1 = inflight_sizes >> _GEN_40;	// @[Monitor.scala:615:33, :638:40]
    wire  [3:0]      _d_clr_wo_ready_T = 4'h1 << _GEN_2;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
    wire  [2:0]      _T_2467 = inflight_1 >> io_in_c_bits_source;	// @[Monitor.scala:723:35, :766:26]
    wire  [2:0]      _T_2483 = inflight_1 >> _GEN_41;	// @[Monitor.scala:682:25, :723:35, :793:25]
    wire  [23:0]     _c_size_lookup_T_1 = inflight_sizes_1 >> _GEN_40;	// @[Monitor.scala:638:40, :725:35, :747:42]
    wire  [3:0]      _d_clr_wo_ready_T_1 = 4'h1 << _GEN_2;	// @[Monitor.scala:654:61, OneHot.scala:57:35]
    wire  [7:0]      _T_2534 = inflight_2 >> _GEN_4;	// @[Monitor.scala:825:27, :833:23, OneHot.scala:57:35]
    wire  [7:0]      _T_2544 = (d_set | inflight_2) >> _GEN_5;	// @[Monitor.scala:825:27, :830:25, :831:72, :832:13, :839:{24,35}, OneHot.scala:57:35]
    always @(posedge clock) begin	// @[Monitor.scala:42:11]
      if (_GEN_11 & ~reset & ~(_T_125 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & _T_116 & io_in_a_bits_address[31:28] == 4'h8)) begin	// @[Monitor.scala:42:11, :81:54, :82:72, Parameters.scala:46:9, :91:48, :92:42, :137:{31,65}, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & ~(_WIRE_2_0 & _T_116 & _T_125 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_address[31:12] == 20'h4 | io_in_a_bits_address[31:16] == 16'h1 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :81:54, :83:78, :638:40, Parameters.scala:46:9, :91:48, :92:42, :137:{31,45,65}, :672:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :81:54, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & ~_T_375) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & _GEN_13) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & io_in_a_bits_mask != 8'hFF) begin	// @[Monitor.scala:42:11, :81:54, :88:{18,31}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_11 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :81:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & ~(_T_306 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & _T_297 & io_in_a_bits_address[31:28] == 4'h8)) begin	// @[Monitor.scala:42:11, :92:53, :93:72, Parameters.scala:46:9, :91:48, :92:42, :137:{31,65}, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & ~(_WIRE_2_0 & _T_297 & _T_306 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_address[31:12] == 20'h4 | io_in_a_bits_address[31:16] == 16'h1 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :92:53, :94:78, :638:40, Parameters.scala:46:9, :91:48, :92:42, :137:{31,45,65}, :672:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :92:53, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & ~_T_375) begin	// @[Misc.scala:205:21, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & _GEN_13) begin	// @[Bundles.scala:111:27, Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_param == 3'h0) begin	// @[Misc.scala:201:34, Monitor.scala:42:11, :92:53, :99:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_mask != 8'hFF) begin	// @[Monitor.scala:42:11, :88:18, :92:53, :100:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_14 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :92:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & ~(_T_416 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2))) begin	// @[Monitor.scala:42:11, :104:45, Parameters.scala:46:9, :92:42, :1161:30, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & ~(_T_416 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h4 | io_in_a_bits_address[31:16] == 16'h1 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :104:45, :638:40, Parameters.scala:92:42, :137:{31,45,65}, :671:54, :672:42, :673:26]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :104:45, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :104:45, :109:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & _GEN_16) begin	// @[Monitor.scala:42:11, :104:45, :110:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_15 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :104:45]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Get is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_17 & ~reset & ~(_T_518 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & (_T_518 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h4 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8)))) begin	// @[Monitor.scala:42:11, :114:53, :115:71, :638:40, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :671:54, :672:42, :673:26, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_17 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :114:53, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_17 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_17 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :114:53, :118:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_17 & ~reset & _GEN_16) begin	// @[Monitor.scala:42:11, :110:30, :114:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutFull contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_18 & ~reset & ~(_T_619 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & (_T_619 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h4 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8)))) begin	// @[Monitor.scala:42:11, :122:56, :123:74, :638:40, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :671:54, :672:42, :673:26, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_18 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :122:56, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_18 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :122:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_18 & ~reset & (|io_in_a_bits_param)) begin	// @[Monitor.scala:42:11, :122:56, :126:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_18 & ~reset & (|(io_in_a_bits_mask & ~mask))) begin	// @[Cat.scala:33:92, Monitor.scala:42:11, :122:56, :127:{31,33,40}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_19 & ~reset & ~(io_in_a_bits_size < 4'hD & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & io_in_a_bits_size < 4'h4 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_address[31:12] == 20'h4 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :130:56, :131:74, :638:40, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :672:42, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_19 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :130:56, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_19 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_19 & ~reset & io_in_a_bits_param > 3'h4) begin	// @[Bundles.scala:141:33, Monitor.scala:42:11, :104:25, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_19 & ~reset & _GEN_16) begin	// @[Monitor.scala:42:11, :110:30, :130:56]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_20 & ~reset & ~(io_in_a_bits_size < 4'hD & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & io_in_a_bits_size < 4'h4 & (io_in_a_bits_address[31:13] == 19'h0 | io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_address[31:12] == 20'h4 | _GEN_12 == 19'h0 | io_in_a_bits_address[31:16] == 16'h200 | io_in_a_bits_address[31:12] == 20'h2010 | io_in_a_bits_address[31:26] == 6'h3 | io_in_a_bits_address[31:12] == 20'h54000 | io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :138:53, :139:71, :638:40, Parameters.scala:46:9, :92:42, :137:{31,45,65}, :672:42, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_20 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :138:53, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_20 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_20 & ~reset & io_in_a_bits_param[2]) begin	// @[Bundles.scala:148:30, Monitor.scala:42:11, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_20 & ~reset & _GEN_16) begin	// @[Monitor.scala:42:11, :110:30, :138:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Logical contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & ~(_T_914 & (_WIRE_2_0 | _source_ok_WIRE_1 | _source_ok_WIRE_2) & (_T_914 & io_in_a_bits_address[31:12] == 20'h3 | io_in_a_bits_size < 4'h7 & io_in_a_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :146:46, :147:68, Parameters.scala:46:9, :92:42, :137:{31,65}, :671:54, :673:26, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & ~source_ok) begin	// @[Monitor.scala:42:11, :146:46, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & (|_GEN_10)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & (|(io_in_a_bits_param[2:1]))) begin	// @[Bundles.scala:161:28, Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & _GEN_16) begin	// @[Monitor.scala:42:11, :110:30, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_21 & ~reset & io_in_a_bits_corrupt) begin	// @[Monitor.scala:42:11, :146:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel Hint is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (io_in_d_valid & ~reset & (&io_in_d_bits_opcode)) begin	// @[Bundles.scala:45:24, Monitor.scala:49:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel has invalid opcode (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :310:52, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & _GEN_23) begin	// @[Monitor.scala:49:11, :310:52, :312:27]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :310:52, :313:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :310:52]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_22 & ~reset & io_in_d_bits_denied) begin	// @[Monitor.scala:49:11, :310:52]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel ReleaseAck is denied (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :318:47, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & _GEN_23) begin	// @[Monitor.scala:49:11, :312:27, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & (&io_in_d_bits_param)) begin	// @[Bundles.scala:105:26, Monitor.scala:49:11, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries invalid cap param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & _GEN_25) begin	// @[Monitor.scala:49:11, :318:47, :323:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant carries toN param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_24 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :318:47]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel Grant is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_26 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :328:51, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_26 & ~reset & _GEN_23) begin	// @[Monitor.scala:49:11, :312:27, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_26 & ~reset & (&io_in_d_bits_param)) begin	// @[Bundles.scala:105:26, Monitor.scala:49:11, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_26 & ~reset & _GEN_25) begin	// @[Monitor.scala:49:11, :323:28, :328:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData carries toN param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_26 & ~reset & ~(~io_in_d_bits_denied | io_in_d_bits_corrupt)) begin	// @[Monitor.scala:49:11, :328:51, :334:{15,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_27 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :338:51, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_27 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :338:51, :341:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAck carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_27 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :338:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_28 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :346:55, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_28 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :346:55, :349:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_28 & ~reset & ~(~io_in_d_bits_denied | io_in_d_bits_corrupt)) begin	// @[Monitor.scala:49:11, :346:55, :350:{15,30}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_29 & ~reset & ~source_ok_1) begin	// @[Monitor.scala:49:11, :354:49, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_29 & ~reset & (|io_in_d_bits_param)) begin	// @[Monitor.scala:49:11, :354:49, :357:28]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel HintAck carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_29 & ~reset & io_in_d_bits_corrupt) begin	// @[Monitor.scala:49:11, :354:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel HintAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & ~(io_in_b_bits_source == 2'h0 & io_in_b_bits_size == 4'h6 & io_in_b_bits_size < 4'hD & (io_in_b_bits_address[31:13] == 19'h0 | io_in_b_bits_address[31:12] == 20'h3 | io_in_b_bits_address[31:12] == 20'h4 | io_in_b_bits_address[31:16] == 16'h1 | {io_in_b_bits_address[31:17] ^ 15'h8, io_in_b_bits_address[15:12]} == 19'h0 | io_in_b_bits_address[31:16] == 16'h200 | io_in_b_bits_address[31:12] == 20'h2010 | io_in_b_bits_address[31:26] == 6'h3 | io_in_b_bits_address[31:12] == 20'h54000 | io_in_b_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:49:11, :168:75, :638:40, Mux.scala:27:73, Parameters.scala:46:9, :91:48, :92:42, :137:{31,45,65}, :672:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel carries Probe type which is unexpected using diplomatic parameters (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & ~(io_in_b_bits_address[31:12] == 20'h3 | io_in_b_bits_address[31:12] == 20'h2010 | io_in_b_bits_address[31:12] == 20'h4 | io_in_b_bits_address[31:12] == 20'h54000 | io_in_b_bits_address[31:12] == 20'h1 | io_in_b_bits_address[31:26] == 6'h3 | io_in_b_bits_address[31:16] == 16'h200 | io_in_b_bits_address[31:12] == 20'h0 | io_in_b_bits_address[31:16] == 16'h1 | io_in_b_bits_address[31:12] == 20'h100 | io_in_b_bits_address[31:12] == 20'h110 | io_in_b_bits_address[31:28] == 4'h8)) begin	// @[Edges.scala:21:16, Monitor.scala:49:11, Parameters.scala:137:{31,65}, :623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel Probe carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & {io_in_b_bits_source == 2'h2, io_in_b_bits_source == 2'h1} != io_in_b_bits_source) begin	// @[Monitor.scala:49:11, :165:113, Mux.scala:27:73, Parameters.scala:46:9]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel Probe carries source that is not first source (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & (|(io_in_b_bits_address[11:0] & ~(_is_aligned_mask_T_4[11:0])))) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:49:11, package.scala:235:{46,71,76}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel Probe address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & (&io_in_b_bits_param)) begin	// @[Bundles.scala:105:26, Monitor.scala:49:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel Probe carries invalid cap param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_b_valid & ~reset & {mask_acc_19 | mask_eq_19 & io_in_b_bits_address[0], mask_acc_19 | mask_eq_19 & ~(io_in_b_bits_address[0]), mask_acc_18 | mask_eq_18 & io_in_b_bits_address[0], mask_acc_18 | mask_eq_18 & ~(io_in_b_bits_address[0]), mask_acc_17 | mask_eq_17 & io_in_b_bits_address[0], mask_acc_17 | mask_eq_17 & ~(io_in_b_bits_address[0]), mask_acc_16 | mask_eq_16 & io_in_b_bits_address[0], mask_acc_16 | mask_eq_16 & ~(io_in_b_bits_address[0])} != 8'hFF) begin	// @[Cat.scala:33:92, Misc.scala:209:26, :210:20, :213:27, :214:29, Monitor.scala:49:11, :88:18, :173:27]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'B' channel Probe contains invalid mask (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_31 & ~reset & ~address_ok_1) begin	// @[Monitor.scala:42:11, :242:50, Parameters.scala:623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_31 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :242:50, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_31 & ~reset & _GEN_32) begin	// @[Monitor.scala:42:11, :242:50, :245:30]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_31 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :242:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_31 & ~reset & (&(io_in_c_bits_param[2:1]))) begin	// @[Bundles.scala:123:29, Monitor.scala:42:11, :242:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck carries invalid report param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_31 & ~reset & io_in_c_bits_corrupt) begin	// @[Monitor.scala:42:11, :242:50]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_33 & ~reset & ~address_ok_1) begin	// @[Monitor.scala:42:11, :251:54, Parameters.scala:623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAckData carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_33 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :251:54, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_33 & ~reset & _GEN_32) begin	// @[Monitor.scala:42:11, :245:30, :251:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAckData smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_33 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :251:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAckData address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_33 & ~reset & (&(io_in_c_bits_param[2:1]))) begin	// @[Bundles.scala:123:29, Monitor.scala:42:11, :251:54]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ProbeAckData carries invalid report param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & ~(_T_1964 & (_WIRE_8_0 | _source_ok_WIRE_2_1 | _source_ok_WIRE_2_2) & _T_1955 & io_in_c_bits_address[31:28] == 4'h8)) begin	// @[Monitor.scala:42:11, :259:49, :260:78, Parameters.scala:46:9, :91:48, :92:42, :137:{31,65}, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel carries Release type unsupported by manager (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & ~(_WIRE_8_0 & _T_1955 & _T_1964 & (io_in_c_bits_address[31:13] == 19'h0 | io_in_c_bits_address[31:12] == 20'h3 | io_in_c_bits_address[31:12] == 20'h4 | io_in_c_bits_address[31:16] == 16'h1 | _GEN_35 == 19'h0 | io_in_c_bits_address[31:16] == 16'h200 | io_in_c_bits_address[31:12] == 20'h2010 | io_in_c_bits_address[31:26] == 6'h3 | io_in_c_bits_address[31:12] == 20'h54000 | io_in_c_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :259:49, :261:78, :638:40, Parameters.scala:46:9, :91:48, :92:42, :137:{31,45,65}, :672:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :259:49, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel Release carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & _GEN_32) begin	// @[Monitor.scala:42:11, :245:30, :259:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel Release smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :259:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel Release address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & (&(io_in_c_bits_param[2:1]))) begin	// @[Bundles.scala:123:29, Monitor.scala:42:11, :259:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel Release carries invalid report param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_34 & ~reset & io_in_c_bits_corrupt) begin	// @[Monitor.scala:42:11, :259:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel Release is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & ~(_T_2140 & (_WIRE_8_0 | _source_ok_WIRE_2_1 | _source_ok_WIRE_2_2) & _T_2131 & io_in_c_bits_address[31:28] == 4'h8)) begin	// @[Monitor.scala:42:11, :269:53, :270:78, Parameters.scala:46:9, :91:48, :92:42, :137:{31,65}, :1162:43]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel carries ReleaseData type unsupported by manager (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & ~(_WIRE_8_0 & _T_2131 & _T_2140 & (io_in_c_bits_address[31:13] == 19'h0 | io_in_c_bits_address[31:12] == 20'h3 | io_in_c_bits_address[31:12] == 20'h4 | io_in_c_bits_address[31:16] == 16'h1 | _GEN_35 == 19'h0 | io_in_c_bits_address[31:16] == 16'h200 | io_in_c_bits_address[31:12] == 20'h2010 | io_in_c_bits_address[31:26] == 6'h3 | io_in_c_bits_address[31:12] == 20'h54000 | io_in_c_bits_address[31:28] == 4'h8))) begin	// @[Monitor.scala:42:11, :269:53, :271:78, :638:40, Parameters.scala:46:9, :91:48, :92:42, :137:{31,45,65}, :672:42]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel carries Release from a client which does not support Probe (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :269:53, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ReleaseData carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & _GEN_32) begin	// @[Monitor.scala:42:11, :245:30, :269:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ReleaseData smaller than a beat (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :269:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ReleaseData address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_36 & ~reset & (&(io_in_c_bits_param[2:1]))) begin	// @[Bundles.scala:123:29, Monitor.scala:42:11, :269:53]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel ReleaseData carries invalid report param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_37 & ~reset & ~address_ok_1) begin	// @[Monitor.scala:42:11, :278:51, Parameters.scala:623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAck carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_37 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :278:51, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_37 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :278:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAck address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_37 & ~reset & (|io_in_c_bits_param)) begin	// @[Monitor.scala:42:11, :278:51, :282:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAck carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_37 & ~reset & io_in_c_bits_corrupt) begin	// @[Monitor.scala:42:11, :278:51]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_38 & ~reset & ~address_ok_1) begin	// @[Monitor.scala:42:11, :286:55, Parameters.scala:623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAckData carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_38 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :286:55, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAckData carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_38 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :286:55]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAckData address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_38 & ~reset & (|io_in_c_bits_param)) begin	// @[Monitor.scala:42:11, :286:55, :290:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel AccessAckData carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_39 & ~reset & ~address_ok_1) begin	// @[Monitor.scala:42:11, :293:49, Parameters.scala:623:64]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel HintAck carries unmanaged address (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_39 & ~reset & ~source_ok_2) begin	// @[Monitor.scala:42:11, :293:49, Parameters.scala:1126:46]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel HintAck carries invalid source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_39 & ~reset & (|_GEN_30)) begin	// @[Edges.scala:21:{16,24}, Monitor.scala:42:11, :293:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel HintAck address not aligned to size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_39 & ~reset & (|io_in_c_bits_param)) begin	// @[Monitor.scala:42:11, :293:49, :297:31]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel HintAck carries invalid param (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_GEN_39 & ~reset & io_in_c_bits_corrupt) begin	// @[Monitor.scala:42:11, :293:49]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel HintAck is corrupt (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2274 & ~reset & io_in_a_bits_opcode != opcode) begin	// @[Monitor.scala:42:11, :384:22, :389:19, :390:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2274 & ~reset & io_in_a_bits_param != param) begin	// @[Monitor.scala:42:11, :385:22, :389:19, :391:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel param changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2274 & ~reset & io_in_a_bits_size != size) begin	// @[Monitor.scala:42:11, :386:22, :389:19, :392:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel size changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2274 & ~reset & io_in_a_bits_source != source) begin	// @[Monitor.scala:42:11, :387:22, :389:19, :393:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel source changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2274 & ~reset & io_in_a_bits_address != address) begin	// @[Monitor.scala:42:11, :388:22, :389:19, :394:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel address changed with multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_opcode != opcode_1) begin	// @[Monitor.scala:49:11, :535:22, :541:19, :542:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_param != param_1) begin	// @[Monitor.scala:49:11, :536:22, :541:19, :543:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel param changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_size != size_1) begin	// @[Monitor.scala:49:11, :537:22, :541:19, :544:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel size changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_source != source_1) begin	// @[Monitor.scala:49:11, :538:22, :541:19, :545:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel source changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_sink != sink) begin	// @[Monitor.scala:49:11, :539:22, :541:19, :546:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel sink changed with multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2298 & ~reset & io_in_d_bits_denied != denied) begin	// @[Monitor.scala:49:11, :540:22, :541:19, :547:29]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel denied changed with multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2350 & ~reset & io_in_c_bits_opcode != opcode_3) begin	// @[Monitor.scala:42:11, :512:22, :517:19, :518:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel opcode changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2350 & ~reset & io_in_c_bits_param != param_3) begin	// @[Monitor.scala:42:11, :513:22, :517:19, :519:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel param changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2350 & ~reset & io_in_c_bits_size != size_3) begin	// @[Monitor.scala:42:11, :514:22, :517:19, :520:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel size changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2350 & ~reset & io_in_c_bits_source != source_3) begin	// @[Monitor.scala:42:11, :515:22, :517:19, :521:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel source changed within multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2350 & ~reset & io_in_c_bits_address != address_2) begin	// @[Monitor.scala:42:11, :516:22, :517:19, :522:32]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel address changed with multibeat operation (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2377 & ~reset & _T_2378[0]) begin	// @[Monitor.scala:42:11, :652:27, :658:26]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'A' channel re-used a source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2396 & ~reset & ~(_T_2397[0] | same_cycle_resp)) begin	// @[Monitor.scala:49:11, :680:71, :681:88, :682:{25,49}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_42 & ~reset & ~(io_in_d_bits_opcode == _GEN_9[io_in_a_bits_opcode] | io_in_d_bits_opcode == _GEN_8[io_in_a_bits_opcode])) begin	// @[Monitor.scala:49:11, :684:30, :685:{38,77}, :686:39]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_42 & ~reset & io_in_a_bits_size != io_in_d_bits_size) begin	// @[Monitor.scala:49:11, :684:30, :687:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_43 & ~reset & ~(io_in_d_bits_opcode == _GEN_9[_a_opcode_lookup_T_1[3:1]] | io_in_d_bits_opcode == _GEN_8[_a_opcode_lookup_T_1[3:1]])) begin	// @[Monitor.scala:42:11, :49:11, :634:{44,152}, :684:30, :685:38, :686:39, :689:{38,72}, :690:38]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper opcode response (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_GEN_43 & ~reset & _GEN_44 != {1'h0, _a_size_lookup_T_1[7:1]}) begin	// @[Monitor.scala:49:11, :638:{19,40}, :684:30, :691:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2425 & a_first_1 & io_in_a_valid & io_in_a_bits_source == io_in_d_bits_source & ~d_release_ack & ~reset & ~(~io_in_d_ready | io_in_a_ready)) begin	// @[Edges.scala:231:25, Monitor.scala:49:11, :670:46, :671:{26,74}, :694:90, :695:{15,32}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(a_set_wo_ready != (_T_2425 & ~d_release_ack ? _d_clr_wo_ready_T[2:0] : 3'h0) | a_set_wo_ready == 3'h0)) begin	// @[Misc.scala:201:34, Monitor.scala:49:11, :624:34, :648:71, :649:22, :662:34, :670:46, :671:{26,71,74,90}, :672:22, :699:{29,48,67}, OneHot.scala:57:35]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'A' and 'D' concurrent, despite minlatency 2 (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(inflight == 3'h0 | _plusarg_reader_out == 32'h0 | watchdog < _plusarg_reader_out)) begin	// @[Misc.scala:201:34, Monitor.scala:42:11, :611:27, :706:27, :709:{26,39,47,59}, PlusArg.scala:80:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: TileLink timeout expired (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2466 & ~reset & _T_2467[0]) begin	// @[Monitor.scala:42:11, :760:38, :766:26]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'C' channel re-used a source ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2482 & ~reset & ~(_T_2483[0] | same_cycle_resp_1)) begin	// @[Monitor.scala:49:11, :791:71, :792:88, :793:{25,49}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2482 & same_cycle_resp_1 & ~reset & io_in_d_bits_size != io_in_c_bits_size) begin	// @[Monitor.scala:49:11, :791:71, :792:88, :795:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2482 & ~same_cycle_resp_1 & ~reset & _GEN_44 != {1'h0, _c_size_lookup_T_1[7:1]}) begin	// @[Monitor.scala:49:11, :691:36, :747:{21,42}, :791:71, :792:88, :794:30, :797:36]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel contains improper response size (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (_T_2497 & c_first_1 & io_in_c_valid & io_in_c_bits_source == io_in_d_bits_source & d_release_ack & ~(io_in_c_bits_opcode == 3'h4 | io_in_c_bits_opcode == 3'h5) & ~reset & ~(~io_in_d_ready | io_in_c_ready)) begin	// @[Edges.scala:231:25, Monitor.scala:49:11, :104:25, :146:25, :670:46, :769:{47,71,95}, :781:26, :801:{90,136}, :802:{15,32}]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if ((|c_set_wo_ready) & ~reset & c_set_wo_ready == (_T_2497 & d_release_ack ? _d_clr_wo_ready_T_1[2:0] : 3'h0)) begin	// @[Misc.scala:201:34, Monitor.scala:49:11, :670:46, :736:34, :756:71, :757:22, :772:34, :781:{26,71,89}, :782:22, :806:28, :807:31, OneHot.scala:57:35]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'C' and 'D' concurrent, despite minlatency 2 (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (~reset & ~(inflight_1 == 3'h0 | _plusarg_reader_1_out == 32'h0 | watchdog_1 < _plusarg_reader_1_out)) begin	// @[Misc.scala:201:34, Monitor.scala:42:11, :706:27, :723:35, :815:27, :818:{26,39,47,59}, PlusArg.scala:80:11]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: TileLink timeout expired (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
      if (_T_2533 & ~reset & _T_2534[0]) begin	// @[Monitor.scala:49:11, :831:38, :833:23]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:49:11]
          $error("Assertion failed: 'D' channel re-used a sink ID (connected at SystemBus.scala:41:96)\n    at Monitor.scala:49 assert(cond, message)\n");	// @[Monitor.scala:49:11]
        if (`STOP_COND_)	// @[Monitor.scala:49:11]
          $fatal;	// @[Monitor.scala:49:11]
      end
      if (io_in_e_valid & ~reset & ~(_T_2544[0])) begin	// @[Monitor.scala:42:11, :839:35]
        if (`ASSERT_VERBOSE_COND_)	// @[Monitor.scala:42:11]
          $error("Assertion failed: 'E' channel acknowledged for nothing inflight (connected at SystemBus.scala:41:96)\n    at Monitor.scala:42 assert(cond, message)\n");	// @[Monitor.scala:42:11]
        if (`STOP_COND_)	// @[Monitor.scala:42:11]
          $fatal;	// @[Monitor.scala:42:11]
      end
    end // always @(posedge)
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0]     _RANDOM_0;
    logic [31:0]     _RANDOM_1;
    logic [31:0]     _RANDOM_2;
    logic [31:0]     _RANDOM_3;
    logic [31:0]     _RANDOM_4;
    logic [31:0]     _RANDOM_5;
    logic [31:0]     _RANDOM_6;
    logic [31:0]     _RANDOM_7;
    logic [31:0]     _RANDOM_8;
    logic [31:0]     _RANDOM_9;
    logic [31:0]     _RANDOM_10;
    logic [31:0]     _RANDOM_11;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        a_first_counter = _RANDOM_0[8:0];	// @[Edges.scala:229:27]
        opcode = _RANDOM_0[11:9];	// @[Edges.scala:229:27, Monitor.scala:384:22]
        param = _RANDOM_0[14:12];	// @[Edges.scala:229:27, Monitor.scala:385:22]
        size = _RANDOM_0[18:15];	// @[Edges.scala:229:27, Monitor.scala:386:22]
        source = _RANDOM_0[20:19];	// @[Edges.scala:229:27, Monitor.scala:387:22]
        address = {_RANDOM_0[31:21], _RANDOM_1[20:0]};	// @[Edges.scala:229:27, Monitor.scala:388:22]
        d_first_counter = _RANDOM_1[29:21];	// @[Edges.scala:229:27, Monitor.scala:388:22]
        opcode_1 = {_RANDOM_1[31:30], _RANDOM_2[0]};	// @[Monitor.scala:388:22, :535:22]
        param_1 = _RANDOM_2[2:1];	// @[Monitor.scala:535:22, :536:22]
        size_1 = _RANDOM_2[6:3];	// @[Monitor.scala:535:22, :537:22]
        source_1 = _RANDOM_2[8:7];	// @[Monitor.scala:535:22, :538:22]
        sink = _RANDOM_2[11:9];	// @[Monitor.scala:535:22, :539:22]
        denied = _RANDOM_2[12];	// @[Monitor.scala:535:22, :540:22]
        c_first_counter = _RANDOM_4[9:1];	// @[Edges.scala:229:27]
        opcode_3 = _RANDOM_4[12:10];	// @[Edges.scala:229:27, Monitor.scala:512:22]
        param_3 = _RANDOM_4[15:13];	// @[Edges.scala:229:27, Monitor.scala:513:22]
        size_3 = _RANDOM_4[19:16];	// @[Edges.scala:229:27, Monitor.scala:514:22]
        source_3 = _RANDOM_4[21:20];	// @[Edges.scala:229:27, Monitor.scala:515:22]
        address_2 = {_RANDOM_4[31:22], _RANDOM_5[21:0]};	// @[Edges.scala:229:27, Monitor.scala:516:22]
        inflight = _RANDOM_5[24:22];	// @[Monitor.scala:516:22, :611:27]
        inflight_opcodes = {_RANDOM_5[31:25], _RANDOM_6[4:0]};	// @[Monitor.scala:516:22, :613:35]
        inflight_sizes = _RANDOM_6[28:5];	// @[Monitor.scala:613:35, :615:33]
        a_first_counter_1 = {_RANDOM_6[31:29], _RANDOM_7[5:0]};	// @[Edges.scala:229:27, Monitor.scala:613:35]
        d_first_counter_1 = _RANDOM_7[14:6];	// @[Edges.scala:229:27]
        watchdog = {_RANDOM_7[31:15], _RANDOM_8[14:0]};	// @[Edges.scala:229:27, Monitor.scala:706:27]
        inflight_1 = _RANDOM_8[17:15];	// @[Monitor.scala:706:27, :723:35]
        inflight_sizes_1 = {_RANDOM_8[31:30], _RANDOM_9[21:0]};	// @[Monitor.scala:706:27, :725:35]
        c_first_counter_1 = _RANDOM_9[30:22];	// @[Edges.scala:229:27, Monitor.scala:725:35]
        d_first_counter_2 = {_RANDOM_9[31], _RANDOM_10[7:0]};	// @[Edges.scala:229:27, Monitor.scala:725:35]
        watchdog_1 = {_RANDOM_10[31:8], _RANDOM_11[7:0]};	// @[Edges.scala:229:27, Monitor.scala:815:27]
        inflight_2 = _RANDOM_11[15:8];	// @[Monitor.scala:815:27, :825:27]
        d_first_counter_3 = _RANDOM_11[24:16];	// @[Edges.scala:229:27, Monitor.scala:815:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_out)
  );
  plusarg_reader #(
    .FORMAT("tilelink_timeout=%d"),
    .DEFAULT(0),
    .WIDTH(32)
  ) plusarg_reader_1 (	// @[PlusArg.scala:80:11]
    .out (_plusarg_reader_1_out)
  );
endmodule

