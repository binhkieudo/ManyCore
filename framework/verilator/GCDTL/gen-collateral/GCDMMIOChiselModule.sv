// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module GCDMMIOChiselModule(
  input         clock,
                reset,
                io_input_valid,
  input  [31:0] io_x,
                io_y,
  input         io_output_ready,
  output        io_input_ready,
                io_output_valid,
  output [31:0] io_gcd
);

  reg  [1:0]  state;	// @[GCD.scala:62:22]
  reg  [31:0] tmp;	// @[GCD.scala:63:18]
  reg  [31:0] gcd;	// @[GCD.scala:64:18]
  wire        _T_7 = state == 2'h0;	// @[GCD.scala:62:22, :66:27]
  wire        _T_5 = state == 2'h2;	// @[GCD.scala:62:22, :67:28]
  wire        _T_9 = state == 2'h1;	// @[GCD.scala:62:22, :71:11, :81:22]
  wire        _T_10 = gcd > tmp;	// @[GCD.scala:63:18, :64:18, :82:15]
  always @(posedge clock) begin
    if (reset)
      state <= 2'h0;	// @[GCD.scala:62:22]
    else if (_T_7 & io_input_valid)	// @[GCD.scala:66:27, :70:26]
      state <= 2'h1;	// @[GCD.scala:62:22, :71:11]
    else if (state == 2'h1 & tmp == 32'h0)	// @[GCD.scala:62:22, :63:18, :71:11, :72:{22,32,39}]
      state <= 2'h2;	// @[GCD.scala:62:22, :67:28]
    else if (_T_5 & io_output_ready)	// @[GCD.scala:67:28, :74:33]
      state <= 2'h0;	// @[GCD.scala:62:22]
    if (_T_7 & io_input_valid) begin	// @[GCD.scala:66:27, :78:26]
      tmp <= io_y;	// @[GCD.scala:63:18]
      gcd <= io_x;	// @[GCD.scala:64:18]
    end
    else begin	// @[GCD.scala:78:26]
      if (~_T_9 | _T_10) begin	// @[GCD.scala:63:18, :81:{22,33}, :82:{15,22}]
      end
      else	// @[GCD.scala:63:18, :81:33, :82:22]
        tmp <= tmp - gcd;	// @[GCD.scala:63:18, :64:18, :85:18]
      if (_T_9 & _T_10)	// @[GCD.scala:64:18, :81:{22,33}, :82:{15,22}, :83:11]
        gcd <= gcd - tmp;	// @[GCD.scala:63:18, :64:18, :83:18]
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    logic [31:0] _RANDOM_1;
    logic [31:0] _RANDOM_2;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        state = _RANDOM_0[1:0];	// @[GCD.scala:62:22]
        tmp = {_RANDOM_0[31:2], _RANDOM_1[1:0]};	// @[GCD.scala:62:22, :63:18]
        gcd = {_RANDOM_1[31:2], _RANDOM_2[1:0]};	// @[GCD.scala:63:18, :64:18]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_input_ready = _T_7;	// @[GCD.scala:66:27]
  assign io_output_valid = _T_5;	// @[GCD.scala:67:28]
  assign io_gcd = gcd;	// @[GCD.scala:64:18]
endmodule

