// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module GCDTL(
  input         clock,
                reset,
                auto_in_a_valid,
  input  [2:0]  auto_in_a_bits_opcode,
                auto_in_a_bits_param,
  input  [1:0]  auto_in_a_bits_size,
  input  [9:0]  auto_in_a_bits_source,
  input  [12:0] auto_in_a_bits_address,
  input  [7:0]  auto_in_a_bits_mask,
  input  [63:0] auto_in_a_bits_data,
  input         auto_in_a_bits_corrupt,
                auto_in_d_ready,
  output        auto_in_a_ready,
                auto_in_d_valid,
  output [2:0]  auto_in_d_bits_opcode,
  output [1:0]  auto_in_d_bits_size,
  output [9:0]  auto_in_d_bits_source,
  output [63:0] auto_in_d_bits_data
);

  wire        _out_wofireMux_T_2;	// @[RegisterRouter.scala:83:24]
  wire        _out_wofireMux_T;	// @[RegisterRouter.scala:83:24]
  wire        out_iindex;	// @[RegisterRouter.scala:83:24]
  wire        _impl_io_input_ready;	// @[GCD.scala:113:11]
  wire        _impl_io_output_valid;	// @[GCD.scala:113:11]
  wire [31:0] _impl_io_gcd;	// @[GCD.scala:113:11]
  reg  [31:0] x;	// @[GCD.scala:105:14]
  wire        out_front_bits_read = auto_in_a_bits_opcode == 3'h4;	// @[RegisterRouter.scala:72:36]
  wire [31:0] _out_womask_T_3 = {{8{auto_in_a_bits_mask[7]}}, {8{auto_in_a_bits_mask[6]}}, {8{auto_in_a_bits_mask[5]}}, {8{auto_in_a_bits_mask[4]}}};	// @[Bitwise.scala:28:17, :77:12, RegisterRouter.scala:83:24]
  wire [31:0] _out_womask_T_2 = {{8{auto_in_a_bits_mask[3]}}, {8{auto_in_a_bits_mask[2]}}, {8{auto_in_a_bits_mask[1]}}, {8{auto_in_a_bits_mask[0]}}};	// @[Bitwise.scala:28:17, :77:12, RegisterRouter.scala:83:24]
  assign out_iindex = auto_in_a_bits_address[3];	// @[RegisterRouter.scala:83:24]
  assign _out_wofireMux_T = auto_in_a_valid & auto_in_d_ready;	// @[RegisterRouter.scala:83:24]
  assign _out_wofireMux_T_2 = _out_wofireMux_T & ~out_front_bits_read;	// @[RegisterRouter.scala:72:36, :83:24]
  wire        out_oready = out_front_bits_read ? ~out_iindex | _impl_io_output_valid | ~(|_out_womask_T_3) | (|(auto_in_a_bits_address[11:4])) : ~out_iindex | _impl_io_input_ready | ~(&_out_womask_T_2) | (|(auto_in_a_bits_address[11:4]));	// @[Edges.scala:192:34, GCD.scala:113:11, MuxLiteral.scala:49:10, RegisterRouter.scala:72:36, :73:19, :83:24]
  wire        out_front_ready = auto_in_d_ready & out_oready;	// @[RegisterRouter.scala:83:24]
  wire        out_valid = auto_in_a_valid & out_oready;	// @[RegisterRouter.scala:83:24]
  wire [2:0]  bundleIn_0_d_bits_opcode = {2'h0, out_front_bits_read};	// @[RegisterRouter.scala:72:36, :98:19]
  always @(posedge clock) begin
    if (_out_wofireMux_T_2 & ~out_iindex & ~(|(auto_in_a_bits_address[11:4])) & (&_out_womask_T_3))	// @[Edges.scala:192:34, RegisterRouter.scala:73:19, :83:24]
      x <= auto_in_a_bits_data[63:32];	// @[GCD.scala:105:14, RegisterRouter.scala:83:24]
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM_0;
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        x = _RANDOM_0;	// @[GCD.scala:105:14]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  TLMonitor_54 monitor (	// @[Nodes.scala:24:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_a_ready        (out_front_ready),	// @[RegisterRouter.scala:83:24]
    .io_in_a_valid        (auto_in_a_valid),
    .io_in_a_bits_opcode  (auto_in_a_bits_opcode),
    .io_in_a_bits_param   (auto_in_a_bits_param),
    .io_in_a_bits_size    (auto_in_a_bits_size),
    .io_in_a_bits_source  (auto_in_a_bits_source),
    .io_in_a_bits_address (auto_in_a_bits_address),
    .io_in_a_bits_mask    (auto_in_a_bits_mask),
    .io_in_a_bits_corrupt (auto_in_a_bits_corrupt),
    .io_in_d_ready        (auto_in_d_ready),
    .io_in_d_valid        (out_valid),	// @[RegisterRouter.scala:83:24]
    .io_in_d_bits_opcode  (bundleIn_0_d_bits_opcode),	// @[RegisterRouter.scala:98:19]
    .io_in_d_bits_size    (auto_in_a_bits_size),
    .io_in_d_bits_source  (auto_in_a_bits_source)
  );
  GCDMMIOChiselModule impl (	// @[GCD.scala:113:11]
    .clock           (clock),
    .reset           (reset),
    .io_input_valid  (_out_wofireMux_T_2 & out_iindex & ~(|(auto_in_a_bits_address[11:4])) & (&_out_womask_T_2)),	// @[Edges.scala:192:34, RegisterRouter.scala:73:19, :83:24]
    .io_x            (x),	// @[GCD.scala:105:14]
    .io_y            (auto_in_a_bits_data[31:0]),	// @[RegisterRouter.scala:83:24]
    .io_output_ready (_out_wofireMux_T & out_front_bits_read & out_iindex & ~(|(auto_in_a_bits_address[11:4])) & (|_out_womask_T_3)),	// @[Edges.scala:192:34, RegisterRouter.scala:72:36, :73:19, :83:24]
    .io_input_ready  (_impl_io_input_ready),
    .io_output_valid (_impl_io_output_valid),
    .io_gcd          (_impl_io_gcd)
  );
  assign auto_in_a_ready = out_front_ready;	// @[RegisterRouter.scala:83:24]
  assign auto_in_d_valid = out_valid;	// @[RegisterRouter.scala:83:24]
  assign auto_in_d_bits_opcode = bundleIn_0_d_bits_opcode;	// @[RegisterRouter.scala:98:19]
  assign auto_in_d_bits_size = auto_in_a_bits_size;
  assign auto_in_d_bits_source = auto_in_a_bits_source;
  assign auto_in_d_bits_data = (|(auto_in_a_bits_address[11:4])) ? 64'h0 : out_iindex ? {_impl_io_gcd, 32'h0} : {62'h0, _impl_io_input_ready, _impl_io_output_valid};	// @[Cat.scala:33:92, Edges.scala:192:34, GCD.scala:113:11, MuxLiteral.scala:49:10, RegisterRouter.scala:73:19, :83:24]
endmodule

